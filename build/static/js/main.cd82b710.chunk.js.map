{"version":3,"sources":["components/Config.js","_actions/user_actions.js","_actions/types.js","hoc/auth.js","components/utils/ImageSlider.js","components/views/LandingPage/Sections/CheckBox.js","components/views/LandingPage/Sections/RadioBox.js","components/views/LandingPage/Sections/SearchFeature.js","components/views/LandingPage/Sections/Datas.js","components/views/LandingPage/LandingPage.js","components/views/LoginPage/LoginPage.js","components/views/RegisterPage/RegisterPage.js","components/views/NavBar/Sections/LeftMenu.js","components/views/NavBar/Sections/RightMenu.js","components/views/NavBar/NavBar.js","components/views/Footer/Footer.js","components/utils/FileUpload.js","components/views/UploadProductPage/UploadProductPage.js","components/views/DetailProductPage/Sections/ProductImage.js","components/views/DetailProductPage/Sections/ProductInfo.js","components/views/DetailProductPage/DetailProductPage.js","components/views/CartPage/Sections/UserCardBlock.js","components/utils/Paypal.js","components/views/CartPage/CartPage.js","components/views/HistoryPage/HistoryPage.js","components/App.js","serviceWorker.js","_reducers/index.js","_reducers/user_reducer.js","index.js"],"names":["USER_SERVER","auth","type","payload","axios","get","then","response","data","SpecificComponent","option","adminRoute","AuthenticationCheck","props","user","useSelector","state","dispatch","useDispatch","useEffect","isAuth","isAdmin","history","push","ImageSlider","autoplay","images","map","image","index","key","style","width","maxHeight","src","Panel","Collapse","CheckBox","useState","Checked","setChecked","defaultActiveKey","header","list","value","Fragment","onChange","currentIndex","indexOf","newChecked","splice","handleFilters","handleToggle","_id","checked","marginRight","name","Radiobox","Value","setValue","Group","event","target","Search","Input","SearchFeature","SearchTerm","setSearchTerm","placeholder","currentTarget","refreshFunction","countries","price","LandingPage","Products","setProducts","Skip","setSkip","Limit","PostSize","setPostSize","Filters","setFilters","getProducts","skip","limit","body","post","success","loadMore","productInfo","postSize","alert","renderCards","product","console","log","lg","md","xs","cover","href","title","description","filters","category","newFilters","priceValues","array","parseInt","handlePrice","showFilteredResults","margin","textAlign","gutter","RadioBox","display","justifyContent","newSearchTerm","searchTerm","onClick","Title","Typography","withRouter","rememberMeChecked","localStorage","getItem","formErrorMessage","setFormErrorMessage","rememberMe","setRememberMe","handleRememberMe","initialEmail","initialValues","email","password","validationSchema","Yup","shape","required","min","onSubmit","values","setSubmitting","setTimeout","dataToSubmit","loginUser","loginSuccess","window","setItem","userId","id","removeItem","catch","err","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","className","level","Item","prefix","color","onBlur","fontSize","border","padding","borderRadius","float","htmlType","minWidth","disabled","formItemLayout","labelCol","span","sm","wrapperCol","tailFormItemLayout","offset","RegisterPage","lastName","confirmPassword","oneOf","lastname","moment","unix","registerUser","errmsg","label","hasFeedback","validateStatus","SubMenu","Menu","MenuItemGroup","ItemGroup","LeftMenu","mode","userData","paddingBottom","count","cart","length","marginBottom","status","NavBar","visible","setVisible","position","zIndex","placement","closable","onClose","Footer","height","flexDirection","alignItems","TrademarkCircleTwoTone","FileUpload","Images","setImages","onDrop","files","formData","FormData","append","filePath","getRootProps","getInputProps","overflow","marginLeft","newImages","deleteHandler","TextArea","Countries","UploadProductPage","setTitle","Description","setDescription","Price","setPrice","Country","setCountry","maxWidth","preventDefault","writer","Axios","item","ProductImage","detail","original","thumbnail","items","ProductInfo","bordered","sold","views","size","productId","withCredentials","addToCart","DetailProductPage","match","params","Product","setProduct","UserCardBlock","renderCartImage","products","alt","quantity","Paypal","total","this","env","client","sandbox","production","currency","onError","onSuccess","payment","onCancel","React","Component","CartPage","Total","setTotal","ShowTotal","setShowTotal","ShowSuccess","setShowSuccess","cartItems","forEach","userCart","cartItem","productDetail","getCartItems","calculateTotal","cartDetail","removeCartItem","marginTop","onSuccessBuy","paymentData","HistoryPage","dateOfPurchase","App","fallback","paddingTop","minHeight","exact","path","component","Auth","LoginPage","Boolean","location","hostname","rootReducer","combineReducers","action","register","loginSucces","createStoreWithMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","Reducer","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd82b710.chunk.js","sourcesContent":["//SERVER ROUTES\nexport const USER_SERVER = 'https://bensmenu.herokuapp.com/api/users';\n","import axios from 'axios';\nimport {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n    ADD_TO_CART,\n    GET_CART_ITEMS,\n    REMOVE_CART_ITEM,\n    ON_SUCCESS_BUY\n} from './types';\nimport { USER_SERVER } from '../components/Config.js';\n//import { response } from 'express';  \n\nexport function registerUser(dataToSubmit){\n    const request = axios.post(`${USER_SERVER}/register`,dataToSubmit)\n        .then(response => response.data);\n    \n    return {\n        type: REGISTER_USER,\n        payload: request\n    }\n}\n\nexport function loginUser(dataToSubmit){\n    const request = axios.post(`${USER_SERVER}/login`,dataToSubmit)   \n                .then(response => response.data);\n\n    return {\n        type: LOGIN_USER,\n        payload: request\n    }\n}\n\nexport function auth(){\n    const request = axios.get(`${USER_SERVER}/auth`) \n    .then(response => response.data);\n\n    return {\n        type: AUTH_USER,\n        payload: request\n    }\n}\n\nexport function logoutUser(){\n    const request = axios.get(`${USER_SERVER}/logout`)  \n    .then(response => response.data);\n\n    return {\n        type: LOGOUT_USER,\n        payload: request\n    }\n}\n\nexport function addToCart(id){\n\n    let body = {\n        productId :id   \n    }\n    //body를넣고 addToCart end point를 backend로(routes/users.js) 보내기(21.9/8)\n    const request = axios.post(`${USER_SERVER}/addToCart`,body,{withCredentials:true})\n    .then(response => response.data);\n    \n    //request를 받아 reducer.js로 가기\n    return {\n        type: ADD_TO_CART,\n        payload: request\n        \n    }\n}\n\nexport function getCartItems(cartItems,userCart){\n\n    const request = axios.get(`https://bensmenu.herokuapp.com/api/product/products_by_id?id=${cartItems}&type=array`)\n    .then(response => {\n        //routes/product.js에서 request받아와서\n        //CartIiem들에 해당하는 정보들을 Product Collection에서 가져온후 qiantity정보를 넣어준다\n         //error 3)redux 간단하게 product.js수정경우 data. 의product 없애도 됨\n        userCart.forEach(cartItem => {\n            response.data.forEach((productDetail, index) => {  \n                if(cartItem.id === productDetail._id){\n                    response.data[index].quantity= cartItem.quantity  //3)redux 간단하게 product.js수정경우 product 없애도 됨\n                }\n            })\n          })\n          return response.data;\n        //return 후 user_reducer.js 로 가기\n    });\n    \n    //request를 받아 reducer.js로 가기\n    return {\n        type: GET_CART_ITEMS,\n        payload: request\n        \n    }\n}\nexport function removeCartItem(productId){\n\n    const request = axios.get(`https://bensmenu.herokuapp.com/api/users/removeFromCart?id=${productId}`)   //,{withCredentials:true}\n    .then(response => {\n        //routes/user.js에서 request받아와서\n        \n        //productInfo,cart 정보를 조합해서 cartDetail을 만들기  => user_reducer로 \n        response.data.cart.forEach(item => {\n            response.data.productInfo.forEach((product,index) =>{\n                if(item.id === product._id){\n                    response.data.productInfo[index].quantity = item.quantity\n                }\n            })\n        })\n          return response.data;\n        //return 후 user_reducer.js 로 가기\n    });\n     //3)request를 받아 reducer.js로 가기\n    return {\n        type: REMOVE_CART_ITEM,\n        payload: request\n     }\n}\n//CartPage 에서 dispatch한 두개 paymentData 와 cartDetail 을 data로받기,//end point와 data\n   //3)request를 받아 reducer.js로 가기\nexport function onSuccessBuy(data){    \n    const request = axios.post(`https://bensmenu.herokuapp.com/api/users/successBuy`,data)      //,{withCredentials:true}\n    .then(response => response.data );\n     \n    return {\n        type: ON_SUCCESS_BUY,\n        payload: request\n     }\n}","export const LOGIN_USER = 'login_user';\nexport const REGISTER_USER = 'register_user';\nexport const AUTH_USER = 'auth_user';\nexport const LOGOUT_USER = 'logout_user';\nexport const ADD_TO_CART ='add_to_cart';\nexport const GET_CART_ITEMS = 'get_cart_items';\nexport const REMOVE_CART_ITEM = 'remove_cart_item';\nexport const ON_SUCCESS_BUY='on_success_buy';","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { auth } from '../_actions/user_actions';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function (SpecificComponent, option, adminRoute = null) {\n    function AuthenticationCheck(props) {\n\n        let user = useSelector(state => state.user);\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n            //To know my current status, send Auth request \n            dispatch(auth()).then(response => {\n                //Not Loggined in Status \n                if (!response.payload.isAuth) {\n                    if (option) {\n                        props.history.push('/login')\n                    }\n                    //Loggined in Status \n                } else {\n                    //supposed to be Admin page, but not admin person wants to go inside\n                    if (adminRoute && !response.payload.isAdmin) {\n                        props.history.push('/')\n                    }\n                    //Logged in Status, but Try to go into log in page \n                    else {\n                        if (option === false) {\n                            props.history.push('/')\n                        }\n                    }\n                }\n            })\n\n        }, [])\n\n        return (\n            <SpecificComponent {...props} user={user} />  //props 값으로 user의 모든 정보 넣어줌 =>UploadProductPage에서 props로 가져가기\n        )\n    }\n    return AuthenticationCheck\n}\n\n\n","\r\nimport React from 'react'\r\nimport {Icon,Col,Card,Row,Carousel} from 'antd'\r\n\r\n\r\nfunction ImageSlider(props) {\r\n  return (\r\n    <div>\r\n      {/* carosel: 수화물 컨테이너 벨트 */}\r\n      <Carousel autoplay>\r\n        {props.images.map((image,index) => (\r\n            <div key={index}>\r\n                 <img style={{width:'100%', maxHeight:'150px'}} \r\n                    src={`https://bensmenu.herokuapp.com/${image}`}  />                     \r\n            </div>\r\n        ))}\r\n      </Carousel>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageSlider\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { Collapse,Checkbox } from 'antd'\r\n\r\nconst {Panel}  = Collapse;\r\n\r\nfunction CheckBox(props) {\r\n    //  _id 를 check하면 state화  [1,2,..]\r\n    const [Checked,setChecked] =useState([])\r\n\r\n    const handleToggle = (value) => {\r\n        //누른 것의 index를 구하고\r\n        const currentIndex = Checked.indexOf(value)\r\n        //전체 Checked 된 State에서 현재누른 Checkbox 가 이미 있다면, spread operator syntax [...Checked]\r\n        const newChecked = [...Checked]\r\n        //-1 = 없으면 State 넣어준다,=> 클릭시 V 표시됨\r\n        if(currentIndex === -1){\r\n            newChecked.push(value)\r\n            //넣어주고 => 클릭시 V 표시됨\r\n        }else{\r\n            //이미 있으면 지워주기\r\n            newChecked.splice(currentIndex,1)\r\n        }\r\n        setChecked(newChecked)\r\n        //newChecked 셋후 부모 component LandingPage에 연결\r\n        props.handleFilters(newChecked)\r\n    }\r\n\r\n    const renderCheckboxLists = () => props.list && props.list.map((value,index) =>(\r\n        <React.Fragment key={index}>\r\n            <Checkbox onChange={()=>handleToggle(value._id)} \r\n                checked={Checked.indexOf(value._id)=== -1 ? false : true}  > \r\n                <span style={{marginRight:'1rem'}}>{value.name}</span>\r\n            </Checkbox>\r\n        </React.Fragment>\r\n    ))\r\n  return (\r\n    <div>\r\n        <Collapse defaultActiveKey={['0']} >\r\n             <Panel header=\"메뉴\" key=\"1\">  \r\n               {renderCheckboxLists()}\r\n            </Panel>\r\n        </Collapse>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CheckBox\r\n","import React, { useState } from 'react'\r\nimport { Collapse,Radio } from 'antd'\r\n\r\nconst {Panel}  = Collapse\r\nfunction Radiobox(props) {\r\n    //value = _id,  _id 가 0으로 시작 \r\n    const [Value, setValue] = useState(0)\r\n    \r\n    const renderRadioBox = ()  => (\r\n        props.list && props.list.map(value => (\r\n            <Radio key={value._id} value={value._id}>{value.name}</Radio>\r\n        ))\r\n    )\r\n        //RadioBox가 클릭되면 이벤트가 발생되어 state setValue값을 변경 state해서 value={Value}가 됨=> 클릭하면 하나만 클릭됨\r\n     const handleChange = (event) => {\r\n            setValue(event.target.value)\r\n            //뉴값을 부모 landingPage에 update하기\r\n            props.handleFilters(event.target.value)\r\n        }\r\n  return (\r\n    <div>\r\n       <Collapse defaultActiveKey={['0']} >  \r\n         <Panel header=\"Price\" key=\"1\">\r\n             <Radio.Group onChange={handleChange} value={Value} >  \r\n                     {renderRadioBox()}\r\n            </Radio.Group>\r\n        </Panel>\r\n              \r\n    </Collapse>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Radiobox\r\n","import React, { useState } from 'react'\r\nimport {Input} from 'antd'\r\n\r\nconst {Search}  = Input;\r\n\r\nfunction SearchFeature(props) {\r\n   \r\n    const [SearchTerm,setSearchTerm] = useState(\"\")\r\n   \r\n    const SearchHandler = (event) =>{\r\n        // 타이핑마다 SearchTerm state 바꿔주기\r\n        setSearchTerm(event.currentTarget.value)  \r\n        props.refreshFunction(event.currentTarget.value)\r\n    }\r\n\r\n  return (\r\n    <div>\r\n          <Search \r\n          placeholder=\"input search text\" \r\n          onChange={SearchHandler} \r\n          style={{ width: 200 }}\r\n          value={SearchTerm} />   \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchFeature\r\n","\r\nconst countries = [ \r\n    {\r\n    \"_id\":1,\r\n    \"name\":\"Korean\"\r\n},\r\n{\r\n    \"_id\":2,\r\n    \"name\":\"Western\"\r\n},\r\n{\r\n    \"_id\":3,\r\n    \"name\":\"Chinese\"\r\n},\r\n{   \"_id\":4,\r\n    \"name\":\"Japanese\"\r\n},\r\n{   \"_id\":5,\r\n    \"name\":\"Others\"\r\n}\r\n// {    \"_id\":5,\r\n//     \"name\":\"Mesh Lining\"\r\n// },\r\n// {    \"_id\":6,\r\n//     \"name\":\"Knit\"\r\n// },\r\n//  {   \"_id\":7,\r\n//     \"name\":\"Zipper\"\r\n// }\r\n]\r\n\r\nconst price = [\r\n    {\r\n        \"_id\":0,\r\n        \"name\":\"Any\",\r\n        \"array\":[]\r\n    },\r\n    {\r\n        \"_id\":1,\r\n        \"name\":\"$0 to $9.99\",\r\n        \"array\":[0,9.99]\r\n    },\r\n    {\r\n        \"_id\":2,\r\n        \"name\":\"$10 ~ $49.99\",\r\n        \"array\":[10,49.99]\r\n    },\r\n    {\r\n        \"_id\":3,\r\n        \"name\":\"$50 ~ $99.99\",\r\n        \"array\":[50,99.99]\r\n    },\r\n    {\r\n        \"_id\":4,\r\n        \"name\":\"$100 ~ $199.99\",\r\n        \"array\":[150,199]\r\n    },\r\n    {\r\n        \"_id\":5,\r\n        \"name\":\"$More than $200\",\r\n        \"array\":[200, 1500000]\r\n    }\r\n]\r\n\r\nexport {\r\n    countries,\r\n    price\r\n}","import React, { useEffect, useState } from 'react'\nimport { FaCode } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport {Icon,Col,Card,Row,Carousel} from 'antd'\nimport Meta from 'antd/lib/card/Meta';\nimport ImageSlider from '../../utils/ImageSlider';\nimport CheckBox from './Sections/CheckBox';\nimport RadioBox from './Sections/RadioBox';\nimport SearchFeature from './Sections/SearchFeature';\nimport { countries,price } from './Sections/Datas';\n\nfunction LandingPage() {\n\n    const [Products, setProducts]  =  useState([])\n    const [Skip,setSkip] = useState(0)\n    const [Limit,setLimit] = useState(4)     // 4만 가겨오기\n    const [PostSize,setPostSize] = useState(0)\n    //Filters  두개의 배열로 초기 state\n    const [Filters,setFilters] = useState({\n        countries:[],\n        price: []\n    })\n    const [SearchTerm,setSearchTerm]  = useState(\"\")\n\n    useEffect(() => {\n       //rendering 이후 처리할 작업을 사용 용도 => DB에서 data를 가져온후 state화 하고 렌더링\n       //body에 넣어 request로 같이 보내기, 데이터베이스에서 정보를 갖고오기\n        let body = {\n            skip:Skip,\n            limit:Limit\n        }\n        //함수화 하여 호출\n        getProducts(body)   \n    },[])\n\n    const getProducts = (body) =>{\n        axios.post('https://bensmenu.herokuapp.com/api/product/products',body)  // routes/product.js 에서 처리후 받기,\n        // 백엔드와 프런트엔드랑 통신을 쉽게 사용하기위해 사용하는 HTTP 비동기 통신 라이브러리\n            .then(response =>{\n                if(response.data.success){\n                   // console.log('api/product/products',response.data)\n                      //원래있는 product를 모두 넣고 , 추가의미\n                   if(body.loadMore){\n                    setProducts([...Products, ...response.data.productInfo]) \n                   }else{\n                    setProducts(response.data.productInfo)\n                   }\n                    setPostSize(response.data.postSize)\n                }else{\n                    alert(\"상품들을 가져오는데 실패 했습니다.\")\n                }\n            })\n    }\n\n    //더보기 버튼 이벤트\n     const loadMoreHandler = () => {\n        //더보기 버튼 누르면 0 + 8 그 다음 8 + 8\n        let skip = Skip + Limit\n            //  loadMore:true  더보기 눌렀을때 정보 추가하여 보내기\n        let body = {\n            skip:skip,\n            limit:Limit,\n            loadMore:true\n        }\n        //호출\n        getProducts(body)\n        //증가되는 skip setState\n        setSkip(skip)\n    }\n\n    const renderCards = Products.map((product,index) => {\n        console.log('rendercards-product',product)  //, row 크기 24, column 큰화면 6 x4개사진, 중간화면 8 x3개, 작은 화면 24개\n        //사진 여러장 돌리기 구현 위 해 InageSlider 자식 컴포넌트 만들기\n           return  <Col lg={6} md={8} xs={24} key={index}>     \n                        <Card\n                            cover={<a href={`/product/${product._id}`}><ImageSlider images={product.images} /></a>}\n                            // a link 에 상품의 고유 id ${product._id} 로 href\n                            >\n                            <Meta\n                                title={product.title}\n                                description={`$${product.price}`}\n                            ></Meta>\n                        </Card>\n                    </Col>\n    })  \n\n    const handlePrice = (value) =>{\n        const data = price;\n        let array = [];\n        //key  = 0,1,2,...\n        for(let key in data){\n               if(data[key]._id === parseInt(value,10)){\n              //dada.js의 array,[0,199]등  , 클릭한 값과 같다면   \n                array = data[key].array;      //같은 _id의 array  \n            }\n        }\n        return array;\n    }\n\n    const showFilteredResults = (filters)  => {\n        let body = {\n            //첵크박스 클릭시 db 에서 처음으로 값 가져오기 skip:0(처음 부터 가져오기), Limit은 초기화 값 8 그대로\n            skip:0,\n            limit:Limit,\n            filters:filters\n        }\n        //더보기 클릭시와 같이 관련값(upload된 것중) 가져오기 \n        getProducts(body)\n        setSkip(0)\n    }\n\n    // checked된 1,2, _id 가 filters에 담김\n    const handleFilters = (filters,category)  =>{\n        //모든 Filters를 newFilters로 복제, category 는 continents 와 Price\n        const newFilters ={...Filters}   // State에 있는 초기 Filters값 모두\n               // continents 나 price 배열을 가리킴, filters = _id값 [1,2,..] \n        newFilters[category]  = filters   //예  [1,2,3]\n         console.log('filters',filters)\n         \n           if(category ===\"price\"){\n            let priceValues = handlePrice(filters)\n            newFilters[category] = priceValues  \n            // priceValues [0,199]등  category = \"price\"\n        }\n        showFilteredResults(newFilters)\n        setFilters(newFilters)      // continent, price 둘다표시되게\n    }\n    // newSearchTerm = event.currentTarget.value\n    const updateSearchTerm = (newSearchTerm) =>{\n          let body = {\n            skip:0,\n            limit:Limit,\n            filters:Filters,  //state 의 Filters\n            searchTerm:newSearchTerm\n        }\n        setSkip(0)\n        setSearchTerm(newSearchTerm)\n        getProducts(body)\n    }\n   \n    return (\n        <div style={{width:'75%', margin:'3rem auto'}} > \n            <div style={{textAlign:'center'}}>\n                     <h2> Ben's Menu {/*<Icon type=\"rocket\"></Icon> */}</h2> \n             </div>\n                {/* Filter */}\n                <Row gutter = {[16,16]}>\n                    <Col lg={12} xs={24}>\n                        {/* 열나누기 전체 24, 큰화면 12 x 2개 반응형으로 작은화면 24x 1만 나오게 */}\n                      {/* 1) CheckBox  list이름으로 continents 데이터 checkbox component에 내려주기, list =props */}\n                        <CheckBox list ={countries} handleFilters={filters => handleFilters(filters,\"countries\")} />\n                        {/* Datas.js 컾포넌트의 배열 continents 를 checkBox에 넣기 */}\n                    </Col>\n\n                    <Col lg={12} xs={24}>\n                        {/* RadioBox */}\n                        <RadioBox list ={price} handleFilters={filters => handleFilters(filters,\"price\")} />\n                    </Col>\n                </Row>\n\n\n                {/* Search */}\n                <div style={{display:'flex',justifyContent: 'flex-end',margin:'1rem auto'}}>\n                    <SearchFeature refreshFunction={updateSearchTerm}  />\n                    {/* props name정의 */}\n                </div>\n\n\n                {/* Cards ,gutter=margin 좌우간격 16 아래 간격 */}\n                <Row gutter={[16,16]}>\n                    {renderCards}\n                </Row>\n                <br/>\n                {/* productInfo.length = PostSize 가 8보다 크거나 같으면 더보기 버튼 보여주기  */}\n                {PostSize >= Limit &&\n                    <div style={{display:'flex', justifyContent:'center'}}>\n                       <button onClick={loadMoreHandler}>더보기</button>\n                     </div>\n                }\n        </div>\n    )\n}\nexport default LandingPage\n","import React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { loginUser } from \"../../../_actions/user_actions\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Icon, Input, Button, Checkbox, Typography } from 'antd';\nimport { useDispatch } from \"react-redux\";\n\nconst { Title } = Typography;\n\nfunction LoginPage(props) {\n  const dispatch = useDispatch();\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\n\n  const [formErrorMessage, setFormErrorMessage] = useState('')\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked)\n\n  const handleRememberMe = () => {\n    setRememberMe(!rememberMe)\n  };\n\n  const initialEmail = localStorage.getItem(\"rememberMe\") ? localStorage.getItem(\"rememberMe\") : '';\n\n  return (\n    <Formik\n      initialValues={{\n        email: initialEmail,\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password\n          };\n\n          dispatch(loginUser(dataToSubmit))\n            .then(response => {\n              if (response.payload.loginSuccess) {\n                window.localStorage.setItem('userId', response.payload.userId);\n                if (rememberMe === true) {\n                  window.localStorage.setItem('rememberMe', values.id);\n                } else {\n                  localStorage.removeItem('rememberMe');\n                }\n                props.history.push(\"/\");\n              } else {\n                setFormErrorMessage('Check out your Account or Password again')\n              }\n            })\n            .catch(err => {\n              setFormErrorMessage('Check out your Account or Password again')\n              setTimeout(() => {\n                setFormErrorMessage(\"\")\n              }, 3000);\n            });\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          //dirty, eslint-disable-next-line\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        //  handleReset,eslint-disable-next-line\n        } = props;\n        return (\n          <div className=\"app\">\n\n            <Title level={2}>Log In</Title>\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\n\n              <Form.Item required>\n                <Input\n                  id=\"email\"\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required>\n                <Input\n                  id=\"password\"\n                  prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              {formErrorMessage && (\n                <label ><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{formErrorMessage}</p></label>\n              )}\n\n              <Form.Item>\n                <Checkbox id=\"rememberMe\" onChange={handleRememberMe} checked={rememberMe} >Remember me</Checkbox>\n                <a className=\"login-form-forgot\" href=\"/reset_user\" style={{ float: 'right' }}>\n                  forgot password\n                  </a>\n                <div>\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ minWidth: '100%' }} disabled={isSubmitting} onSubmit={handleSubmit}>\n                    Log in\n                </Button>\n                </div>\n                Or <a href=\"/register\">register now!</a>\n              </Form.Item>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default withRouter(LoginPage);\n\n\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { registerUser } from \"../../../_actions/user_actions\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  return (\n\n    <Formik\n      initialValues={{\n        email: '',\n        lastName: '',\n        name: '',\n        password: '',\n        confirmPassword: ''\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .required('Name is required'),\n        lastName: Yup.string()\n          .required('Last Name is required'),\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n        confirmPassword: Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\n          .required('Confirm Password is required')\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            lastname: values.lastname,\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\n          };\n\n          dispatch(registerUser(dataToSubmit)).then(response => {\n            if (response.payload.success) {\n              props.history.push(\"/login\");\n            } else {\n              alert(response.payload.err.errmsg)\n            }\n          })\n\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n         // dirty,  eslint-disable-next-line\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n         //  handleReset,  eslint-disable-next-line\n        } = props;\n        return (\n          <div className=\"app\">\n            <h2>Sign up</h2>\n            <Form style={{ minWidth: '375px' }} {...formItemLayout} onSubmit={handleSubmit} >\n\n              <Form.Item required label=\"Name\">\n                <Input\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                  type=\"text\"\n                  value={values.name}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.name && touched.name ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.name && touched.name && (\n                  <div className=\"input-feedback\">{errors.name}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Last Name\">\n                <Input\n                  id=\"lastName\"\n                  placeholder=\"Enter your Last Name\"\n                  type=\"text\"\n                  value={values.lastName}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.lastName && touched.lastName ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.lastName && touched.lastName && (\n                  <div className=\"input-feedback\">{errors.lastName}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Email\" hasFeedback validateStatus={errors.email && touched.email ? \"error\" : 'success'}>\n                <Input\n                  id=\"email\"\n                  placeholder=\"Enter your Email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Password\" hasFeedback validateStatus={errors.password && touched.password ? \"error\" : 'success'}>\n                <Input\n                  id=\"password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Confirm\" hasFeedback>\n                <Input\n                  id=\"confirmPassword\"\n                  placeholder=\"Enter your confirmPassword\"\n                  type=\"password\"\n                  value={values.confirmPassword}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.confirmPassword && touched.confirmPassword && (\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item {...tailFormItemLayout}>\n                <Button onClick={handleSubmit} type=\"primary\" disabled={isSubmitting}>\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\n\nexport default RegisterPage\n","import React from 'react';\nimport { Menu } from 'antd';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nfunction LeftMenu(props) {\n  return (\n    <Menu mode={props.mode}>\n    <Menu.Item key=\"mail\">\n      <a href=\"/\">Home</a>\n    </Menu.Item>\n    <SubMenu title={<span>뉴앱</span>}>\n      <MenuItemGroup title=\"Item 1\">\n        <Menu.Item key=\"setting:1\"><a href=\"https://sttrimming.herokuapp.com\">위치정보주기</a>  </Menu.Item>\n        <Menu.Item key=\"setting:2\"><a href=\"https://swtrimming.com/logistic/\">위치정보받기</a>  </Menu.Item>\n      </MenuItemGroup>\n      <MenuItemGroup title=\"Item 2\">\n        <Menu.Item key=\"setting:3\"><a href=\"/\">쇼핑몰 BenMenu</a>  </Menu.Item>\n        <Menu.Item key=\"setting:4\"><a href=\"/\">쇼핑몰 comming soon</a> </Menu.Item>\n      </MenuItemGroup>\n    </SubMenu>\n  </Menu>\n  )\n}\n\nexport default LeftMenu","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { Menu ,Icon,Badge} from 'antd';\nimport axios from 'axios';\nimport { USER_SERVER } from '../../../Config';\nimport { withRouter } from 'react-router-dom';\nimport { useSelector } from \"react-redux\";\n\nfunction RightMenu(props) {\n  const user = useSelector(state => state.user)\n\n  const logoutHandler = () => {\n    axios.get(`${USER_SERVER}/logout`).then(response => {\n      if (response.status === 200) {\n        props.history.push(\"/login\");\n      } else {\n        alert('Log Out Failed')\n      }\n    });\n  };\n  console.log('user.userdata',user.userData );\n  if (user.userData && !user.userData.isAuth) {\n    return (\n      <Menu mode={props.mode}>\n        <Menu.Item key=\"mail\">\n          <a href=\"/login\">Signin</a>\n        </Menu.Item>\n        <Menu.Item key=\"app\">\n          <a href=\"/register\">Signup</a>\n        </Menu.Item>\n      </Menu>\n    )\n  } else {\n    return (\n      <Menu mode={props.mode}>\n         <Menu.Item key=\"history\">\n          <a href=\"/history\">History</a>\n        </Menu.Item>\n\n         <Menu.Item key=\"upload\">\n          <a href=\"/product/upload\">Upload</a>\n        </Menu.Item>\n\n        <Menu.Item key=\"cart\" style={{paddingBottom:3}}>\n          <Badge count={user.userData && user.userData.cart.length}>\n           <a href =\"/user/cart\" className=\"head-example\" style={{marginRight:-22,color:'#667777'}}  >\n             <Icon type=\"shopping-cart\" style={{fontSize:30,marginBottom:3}} />\n           </a>\n          </Badge>\n        </Menu.Item>\n\n        <Menu.Item key=\"logout\">\n          <a onClick={logoutHandler}>Logout</a>\n        </Menu.Item>\n      </Menu>\n    )\n  }\n}\n\nexport default withRouter(RightMenu);\n\n","import React, { useState } from 'react';\nimport LeftMenu from './Sections/LeftMenu';\nimport RightMenu from './Sections/RightMenu';\nimport { Drawer, Button, Icon } from 'antd';\nimport './Sections/Navbar.css';\n\nfunction NavBar() {\n  const [visible, setVisible] = useState(false)\n\n  const showDrawer = () => {\n    setVisible(true)\n  };\n\n  const onClose = () => {\n    setVisible(false)\n  };\n\n  return (\n    <nav className=\"menu\" style={{ position: 'fixed', zIndex: 5, width: '100%' }}>\n      <div className=\"menu__logo\">\n        <a href=\"https://swtrimming.com\">SW</a>\n      </div>\n      <div className=\"menu__container\">\n        <div className=\"menu_left\">\n          <LeftMenu mode=\"horizontal\" />\n        </div>\n        <div className=\"menu_rigth\">\n          <RightMenu mode=\"horizontal\" />\n        </div>\n        <Button\n          className=\"menu__mobile-button\"\n          type=\"primary\"\n          onClick={showDrawer}\n        >\n          <Icon type=\"align-right\" />\n        </Button>\n        <Drawer\n          title=\"Basic Drawer\"\n          placement=\"right\"\n          className=\"menu_drawer\"\n          closable={false}\n          onClose={onClose}\n          visible={visible}\n        >\n          <LeftMenu mode=\"inline\" />\n          <RightMenu mode=\"inline\" />\n        </Drawer>\n      </div>\n    </nav>\n  )\n}\n\nexport default NavBar","import React from 'react'\nimport {Icon} from 'antd';\nimport {SyncOutlined,TrademarkCircleTwoTone} from '@ant-design/icons';\n\n\nfunction Footer() {\n    return (\n        <div style={{\n            height: '80px', display: 'flex',\n            flexDirection: 'column', alignItems: 'center',\n            justifyContent: 'center', fontSize:'1rem'\n        }}>\n           <p> Developed by swtrimming.com&nbsp;<TrademarkCircleTwoTone />{/*<Icon type=\"smile\" />*/}</p>\n        </div>\n    )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport {Icon} from 'antd';\r\nimport axios from 'axios';  \r\n//bakend 에 파일전달 라이브러리\r\n\r\nfunction FileUpload(props) {   \r\n  //저장된 파일을 프런트엔드에 전달해주는 기능, 아래 ,27, 44line props 사용위해 인자 넣기\r\n \r\n  const [Images,setImages] = useState([])   //이미지를 여러개 배열로 []\r\n \r\n  const dropHandler =(files) => {\r\n   \r\n    let formData = new FormData();\r\n    const config ={\r\n      header:{'content-type' : 'multipart/form-data'} //backend 에 request시 형식 알리기\r\n    }\r\n    formData.append(\"file\",files[0])\r\n    //formData안에 file을 올리면 file정보 들어감 \r\n    axios.post('https://bensmenu.herokuapp.com/api/product/image',formData,config)  //request:백엔드에 file request 보낼때 error 방지 위해 formData,config 인자 사용\r\n      .then(response => {\r\n          if(response.data.success){\r\n            //alert('파일을 저장하는데 성공했습니다.')\r\n            console.log('file upload response.data',response.data)  // //backend에서 frontend로 정보 전달 : 파일 경로, 파일명이 오게됨\r\n             setImages([...Images,response.data.filePath])  \r\n            // ...Images  spread operator를 이용 모든 image 저장 ,새로운 response.data.filePath를 Images에 setImages하면 새로운 이미지가 생기게 됨\r\n            props.refreshFunction([...Images,response.data.filePath])   //image file을 올릴때 부모 UploadProductPage의 props 호출하여 변경시키기\r\n          }else{\r\n            alert('파일을 저장하는데 실패했습니다.')\r\n          }\r\n        })\r\n      }  //end of dropHandler\r\n  \r\n  const deleteHandler =(image) => {\r\n    const currentIndex = Images.indexOf(image)    //image의 indexOF() 메소드 이용 index 찾기\r\n    //console.log('currentIndex',currentIndex);\r\n    let newImages = [...Images]   //Images 배열에 있는 모든 images를 newImages에 복사\r\n    newImages.splice(currentIndex,1)    //currendex 1개를 지우는 메소드 splice\r\n    setImages(newImages)               //newImages를 셋팅하고 부모  UploadProductPage에 넘겨주어야함\r\n    props.refreshFunction(newImages)   //image file을 올릴때 부모 UploadProductPage의 props 호출하여 삭제변경시키기\r\n  }\r\n  \r\n  return (\r\n        //  {/* npm install react-dropzone --save */}\r\n    <div style={{display:'flex', justifyContent:'spacebetween'}}>\r\n\r\n       {/* //react-dropzone-npm 공인 사이트에서 가겨오기  */}\r\n      <Dropzone onDrop={dropHandler}>\r\n        {({getRootProps, getInputProps}) => (\r\n          <section>\r\n            <div  style={{\r\n                  width:300, height:240, border:'1px solid lightgray',\r\n                  display:'flex', alignItems:'center', justifyContent:'center'\r\n            }}\r\n            \r\n              {...getRootProps()}>\r\n              <input {...getInputProps()} />\r\n              <Icon type=\"plus\" style={{fontSize:'3rem'}} ></Icon>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </Dropzone>\r\n\r\n            {/* //파일올리면 파일 렌더링 , 파일이 아오게 */}\r\n\r\n            <div style={{display:'flex', width:'350px',height:'240px',overflow:'scroll', border:'1px solid blue', marginLeft:'1rem'}}>\r\n              \r\n              {Images.map((image,index) => (   \r\n                  <div onClick={()=>deleteHandler(image)} key={index}>       {/* image index받기위해 image넣기 */}\r\n                    <img style={{minWidth:'300px',width:'300px',height:'240px', marginLeft:'.5rem'}}\r\n                        src={`https://bensmenu.herokuapp.com/${image}`} />\r\n                  </div>\r\n              ) )}\r\n\r\n            </div>\r\n    </div>\r\n  )\r\n}\r\nexport default FileUpload\r\n","import React, { useState } from 'react'\r\nimport { Typography, Button, Form, Input } from 'antd';\r\nimport FileUpload from '../../utils/FileUpload';\r\nimport Axios from 'axios';\r\n\r\nconst { TextArea } = Input;\r\n\r\n// step 1 UploadPage  만들기 \r\n// const Continents = [\r\n//     { key: 1, value: \"Africa\" },\r\n//     { key: 2, value: \"Europe\" },\r\n//     { key: 3, value: \"Asia\" },\r\n//     { key: 4, value: \"North America\" },\r\n//     { key: 5, value: \"South America\" },\r\n//     { key: 6, value: \"Australia\" },\r\n//     { key: 7, value: \"Antarctica\" }\r\n// ]\r\nconst Countries = [\r\n    { key: 1, value: \"Korean\" },\r\n    { key: 2, value: \"Western\" },\r\n    { key: 3, value: \"Chinese\" },\r\n    { key: 4, value: \"Japanese\" },\r\n    { key: 5, value: \"Others\" }\r\n]\r\nfunction UploadProductPage(props) {\r\n\r\n    const [Title, setTitle] = useState(\"\")    // event 발생시 setTitle 함수로 State값을 변경해 Title에 넣어 준다 => server쪽에 보낼 모든 정보들\r\n    const [Description, setDescription] = useState(\"\")\r\n    const [Price, setPrice] = useState(0)\r\n    const [Country, setCountry] = useState(1)\r\n    const [Images, setImages] = useState([])\r\n\r\n    //event를 이용 setTitle로 Title값을 바꿔줌\r\n    const titleChangeHandler = (event) => {\r\n        setTitle(event.currentTarget.value)   // event 발생시 setTitle 함수로 State값을 변경해 Title에 넣어 준다\r\n    }\r\n    const descriptionChangeHandler = (event) => {\r\n        setDescription(event.currentTarget.value)\r\n    }\r\n    const priceChangeHandler = (event) => {\r\n        setPrice(event.currentTarget.value)\r\n    }\r\n    const continentChangeHandler = (event) => {\r\n        setCountry(event.currentTarget.value)\r\n    }\r\n    //console.log('Countrys key',Country)\r\n    const updateImages = (newImages) => {  //Fileupload에서 올린 newImages를 받아와 UploadProductPage의 setImages로 state값 넣기\r\n        setImages(newImages)\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        //모든 state값 채워야 넘어가게 설정\r\n        if (!Title || !Description || !Price || !Country || Images.length === 0) {\r\n            return alert(\" 모든 값을 넣어주셔야 합니다.\")\r\n        }\r\n        //서버에 채운 값들을 request로 보낸다.\r\n        const body = {\r\n            //로그인 된 사람의 ID , hoc/auth.js의 자식 컴포넌트로 props가져오기\r\n            writer: props.user.userData._id,\r\n            title: Title,\r\n            description: Description,\r\n            price: Price,\r\n            images: Images,\r\n            countries: Country\r\n        }\r\n        Axios.post('https://bensmenu.herokuapp.com/api/product', body)  //backend로 body의 모든 정보 보내기 =>server 쪽 index.js=> routes/product.js\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('상품 업로드에 성공 했습니다.')\r\n                    props.history.push('/')   //성공을하면 '/' landing page경로로 보내기\r\n                } else {\r\n                    alert('상품 업로드에 실패 했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\r\n            <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n                <h2> 상품 업로드</h2>\r\n            </div>\r\n            <Form onSubmit={submitHandler}>\r\n                {/* DropZone */}\r\n                <FileUpload refreshFunction={updateImages} />\r\n                <br />\r\n                <br />\r\n                <label>이름</label>\r\n                <Input onChange={titleChangeHandler} value={Title} />\r\n                <br />\r\n                <br />\r\n                <label>설명</label>\r\n                <TextArea onChange={descriptionChangeHandler} value={Description} />\r\n                <br />\r\n                <br />\r\n                <label>가격($)</label>\r\n                <Input type=\"number\" onChange={priceChangeHandler} value={Price} />\r\n                <br />\r\n                <br />\r\n                 <select onChange={continentChangeHandler} value={Country}>  {/*event가 일어나면 setContinent메소드로 state값 continent값이 바뀜, Country는 키값 1,2,3,4,5 */}\r\n                    {Countries.map(item => (\r\n                        <option key={item.key} value={item.key}> {item.value}  </option>\r\n                    ))}\r\n                </select>\r\n                <br />\r\n                <br />\r\n                <button type=\"submit\">\r\n                    확인\r\n                </button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nexport default UploadProductPage\r\n","import React, { useEffect, useState } from 'react'\r\nimport ImageGallery from 'react-image-gallery'\r\n\r\nfunction ProductImage(props) {\r\n\r\n    const [Images,setImages] = useState([])\r\n     \r\n    //2)Life Cycle 작동\r\n    useEffect(()=>{\r\n        if(props.detail.images && props.detail.images.length >0){\r\n            let images =[]\r\n            props.detail.images.map(item =>{\r\n                images.push({\r\n                    original:`https://bensmenu.herokuapp.com/${item}`,\r\n                    thumbnail:`https://bensmenu.herokuapp.com/${item}`,\r\n                })\r\n                setImages(images)\r\n            })\r\n        }\r\n    },[props.detail])\r\n    // 3)props.detail 이 바뀔때마다 useEffect를 한번더 실행기킴\r\n\r\n    // const images = [\r\n    //     {\r\n    //         original: 'https://picsum.photos/id/1018/1000/600/',\r\n    //         thumbnail: 'https://picsum.photos/id/1018/250/150/',\r\n    //     },\r\n    //     {\r\n    //         original: 'https://picsum.photos/id/1015/1000/600/',\r\n    //         thumbnail: 'https://picsum.photos/id/1015/250/150/',\r\n    //     },\r\n    //     {\r\n    //         original: 'https://picsum.photos/id/1019/1000/600/',\r\n    //         thumbnail: 'https://picsum.photos/id/1019/250/150/',\r\n    //     },\r\n    // ];\r\n\r\n    //1)rendering\r\n  return (\r\n    <div>\r\n      <ImageGallery  items={Images} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductImage\r\n","import React from 'react'\r\nimport {Button, Descriptions} from 'antd';\r\nimport { useDispatch} from 'react-redux';\r\nimport {addToCart} from '../../../../_actions/user_actions';\r\n\r\nfunction ProductInfo(props) {\r\n    //props= 부모 컴포넌트의 detail={Product}을 가져옴\r\n    const dispatch = useDispatch();\r\n\r\n    const clickHandler =() =>{\r\n        //필요한 정보를 Cart 필드에다가 넣어준다, redux이용\r\n        dispatch(addToCart(props.detail._id))\r\n\r\n    }\r\n  return (\r\n    <div>\r\n        <Descriptions title=\"Product Info\" bordered>\r\n            <Descriptions.Item label=\"Price\">{props.detail.price}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Sold\">{props.detail.sold}</Descriptions.Item>\r\n            <Descriptions.Item label=\"View\">{props.detail.views}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Description\">{props.detail.description}</Descriptions.Item>\r\n        </Descriptions>\r\n\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <div style={{display:'flex', justifyContent:'center'}}>\r\n            <Button size=\"large\" shape=\"round\" type=\"danger\" onClick={clickHandler}>\r\n                Add to Cart, Further Inquiry\r\n            </Button>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductInfo\r\n","import React, { useEffect,useState } from 'react'\r\nimport axios from 'axios'\r\nimport ProductImage from './Sections/ProductImage'\r\nimport ProductInfo from './Sections/ProductInfo'\r\nimport {Row,Col}  from 'antd'\r\n\r\nfunction DetailProductPage(props) {\r\n\r\n    const productId =props.match.params.productId\r\n    // productId는 각 image의 unitque id, &type=single 하나만 가져오기\r\n\r\n    // 초기화 객체화 {}\r\n    const [Product,setProduct] = useState({})\r\n\r\n    useEffect(()=>{\r\n        axios.get(`https://bensmenu.herokuapp.com/api/product/products_by_id?id=${productId}&type=single`)\r\n            .then(response =>{\r\n                setProduct(response.data[0])\r\n            })\r\n            .catch(err  => alert(err) )\r\n            //     if(response.data.success){\r\n            //         console.log('DetailPage => response.data ',response.data)\r\n            //         setProduct(response.data.product[0])\r\n            //     }else{\r\n            //         alert('상세 정보 가져오기를 실패했습니다.')\r\n            //     }\r\n            // })\r\n\r\n            // 2) redux 안 간단하게  if(){}안에 setProduct(response.data[0])  <= (response.data.product[0])\r\n            \r\n     },[])\r\n\r\n  return (\r\n    <div style={{width:'100%', padding:'3rem 4rem'}}>\r\n        <div style={{display:'flex', justifyContent:'center'}}>\r\n            <h1>{Product.title}</h1>\r\n        </div>\r\n        <br/>\r\n\r\n        <Row gutter={[16,16]}>\r\n            <Col lg={12} sm={24}>\r\n                {/* ProductImage  ,   detail 안에 모든 Product정보 넣기, lg 는 12로 두개로 나누기 */}\r\n                <ProductImage detail={Product} />\r\n            </Col>\r\n            \r\n            <Col lg={12} sm={24}>\r\n                {/* ProductInfo */}\r\n                <ProductInfo detail={Product} />\r\n            </Col>\r\n\r\n        </Row>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DetailProductPage\r\n","import React from 'react'\r\nimport \"./UserCardBlock.css\";\r\n\r\nfunction UserCardBlock(props) {\r\n\r\n  // 이미지가 두개이상이상이면 첫번째이미지만 가져오기\r\n  const renderCartImage =(images) => {\r\n    if(images.length > 0){\r\n      let image = images[0]\r\n      return `https://bensmenu.herokuapp.com/${image}`\r\n    }\r\n  }\r\n\r\n   const renderItems = () => (\r\n    props.products && props.products.map((product,index) => (\r\n        <tr key={index}>\r\n          <td>\r\n            <img style={{width:'70px'}} alt=\"product\" src={renderCartImage(product.images)}  />\r\n          </td>\r\n          <td>\r\n            {product.quantity}  EA\r\n          </td>\r\n          <td>\r\n            ${product.price}\r\n          </td>\r\n          <td>\r\n            <button onClick={()=>props.removeItem(product._id)}>Remove</button>\r\n            {/* 1)버튼을 누르면 CartPage.js 의 props.removeItem 호출 */}\r\n          </td>\r\n        </tr>\r\n\r\n    ))\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Product Image</th>\r\n            <th>Product Quantity</th>\r\n            <th>Product Price</th>\r\n            <th>Product from Cart</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n           {renderItems()}\r\n        </tbody>\r\n      </table>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserCardBlock\r\n","import React from 'react';\r\nimport PaypalExpressBtn from 'react-paypal-express-checkout';\r\n \r\nexport default class Paypal extends React.Component {\r\n    render() {\r\n        const onSuccess = (payment) => {\r\n            // Congratulation, it came here means everything's fine!\r\n            \t\tconsole.log(\"The payment was succeeded!\", payment);\r\n\r\n                    this.props.onSuccess(payment)\r\n                    //props통해서 부모 컴포넌트에 payment 정보 넘겨주기 CartPage line 58~\r\n            \t\t// You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\r\n        }\r\n \r\n        const onCancel = (data) => {\r\n            // User pressed \"cancel\" or close Paypal's popup!\r\n            console.log('The payment was cancelled!', data);\r\n            // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\r\n        }\r\n \r\n        const onError = (err) => {\r\n            // The main Paypal's script cannot be loaded or somethings block the loading of that script!\r\n            console.log(\"Error!\", err);\r\n            // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\r\n            // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\r\n        }\r\n \r\n        let env = 'sandbox'; // you can set here to 'production' for production\r\n        let currency = 'USD'; // or you can set this value from your props or state\r\n        let total = this.props.total; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\r\n        // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\r\n        // sandbos account 만들어 Client ID를 복사해와서 sandbox의 키값으로 넣기\r\n        const client = {\r\n            sandbox:    'AVmkxTLhKaLi3o-NrxWBH1q8w4an627HJlNqyWEeoPSj4YHuJ99BM6BNoJbr13y-BAgtXXQvmOLkn6OD',\r\n            production: 'YOUR-PRODUCTION-APP-ID',\r\n        }\r\n        // In order to get production's app-ID, you will have to send your app to Paypal for approval first\r\n        // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\r\n        //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\r\n        // For production app-ID:\r\n        //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\r\n \r\n        // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\r\n        return (\r\n            <PaypalExpressBtn \r\n            env={env}\r\n             client={client} \r\n             currency={currency} \r\n             total={total} \r\n             onError={onError} \r\n             onSuccess={onSuccess} \r\n             onCancel={onCancel}\r\n            style={{size:'large',color:'blue',shape:'rect', label:'checkout'}} />\r\n        );\r\n    }\r\n}","import React, {useEffect, useState } from 'react'\r\nimport {useDispatch} from 'react-redux';\r\nimport {getCartItems, removeCartItem, onSuccessBuy} from '../../../_actions/user_actions';\r\nimport UserCardBlock from './Sections/UserCardBlock';\r\nimport { Empty,Result } from 'antd';\r\nimport Paypal from '../../utils/Paypal';\r\n\r\nfunction CartPage(props) {\r\n \r\n  const dispatch = useDispatch();\r\n\r\n  const [Total,setTotal] =useState(0)\r\n  const [ShowTotal,setShowTotal] = useState(false) \r\n  // true일때만 가격 보여주기,처음에 안보여야 해서 false\r\n  const [ShowSuccess,setShowSuccess] = useState(false)\r\n\r\n  useEffect(() =>{\r\n   \r\n    let cartItems = []\r\n\r\n    //redux User state안에 cart안에 상품이 들어있는 지 확인\r\n    if(props.user.userData && props.user.userData.cart){\r\n        if(props.user.userData.cart.length > 0){\r\n          props.user.userData.cart.forEach(item => {\r\n              cartItems.push(item.id)\r\n          })\r\n          dispatch(getCartItems(cartItems, props.user.userData.cart))\r\n             .then(response =>  {calculateTotal(response.payload)})  //console.log('CartPage' , response)) \r\n       }\r\n    }\r\n  },[props.user.userData])\r\n\r\n  let calculateTotal =(cartDetail) =>{\r\n    let total =0;\r\n//Objects, {} in JavaScript does not have the method .map(). It's only for Arrays, [].\r\n//→ 오브젝트는 map()함수를 가지고있지 않아 사용할 수가 없다. 배열만 가능하다.\r\n//→ data.map()으로 썻으면 data.product.map()으로 코드를 바꿔라 왜냐면 product가 배열이니깐 잘 반복될거야\r\n\r\n    cartDetail.map(item => {\r\n      total += parseInt(item.price, 10) * item.quantity\r\n    })\r\n    setTotal(total)\r\n    setShowTotal(true)\r\n  }\r\n\r\n  let removeFromCart = (productId) => {\r\n    //2) redux action =removeCartItem  => user_actions.js의 export function removeCartItem\r\n    dispatch(removeCartItem(productId))\r\n    .then(response =>{\r\n      //console.log('remove버튼 response',response)\r\n      if(response.payload.productInfo.length <=0){\r\n        setShowTotal(false)\r\n\r\n      }\r\n\r\n    })\r\n  }\r\n    const transactionSuccess = (data) => {\r\n      dispatch(onSuccessBuy({       \r\n         paymentData : data,     \r\n        cartDetail : props.user.cartDetail    \r\n\r\n      }))\r\n        .then(response => {\r\n        if(response.payload.success){\r\n          setShowTotal(false)    \r\n          setShowSuccess(true)   \r\n        }\r\n      })\r\n    }\r\n\r\n  return (\r\n    <div style={{width:'85%', margin:'3rem auto'}}>\r\n        <h1>My Cart </h1>\r\n        <div>\r\n          <UserCardBlock products={props.user.cartDetail} removeItem={removeFromCart}/>\r\n          {/* //3)redux 간단하게 product.js수정경우 products={props.user.cartDetail  && props.user.cartDetail.product}중 && props.user.cartDetail.product 없애도 됨 */}\r\n        </div>\r\n\r\n        {ShowTotal ?\r\n            <div style={{marginTop:'3rem'}}>\r\n            <h2>Total Amount : ${Total}</h2>\r\n          </div>\r\n          : ShowSuccess ?\r\n             <Result\r\n              status=\"success\"\r\n              title=\"Successfully Purchased Items\"\r\n            />\r\n          :\r\n          <>\r\n          <br/>\r\n          <br/>\r\n            <Empty description={false}/>\r\n            <br/>\r\n          </>\r\n         \r\n      }\r\n           {/* <p style={{textAlign:'center' ,color:'red'}}>카트에 선택하신 상품이 없습니다</p> */}\r\n            {ShowTotal && \r\n             <Paypal \r\n             total = {Total}\r\n             onSuccess={transactionSuccess}\r\n             />\r\n            \r\n            }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CartPage\r\n","import React from 'react'\r\n//import { User } from '../../../../../server/models/User'\r\n\r\n\r\nfunction HistoryPage(props) {\r\n\r\n  return (\r\n    <div style={{width:'80%', margin:'3rem auto'}}>\r\n       <div style={{textAlign:'center'}}>\r\n            <h1>History</h1>\r\n        </div>\r\n        <br/>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Payment Id</th>\r\n                    <th>Price</th>\r\n                    <th>Quantity</th>\r\n                    <th>Date of Purchase</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.user.userData && props.user.userData.history.map(item=>(\r\n                    <tr key ={item.id}>\r\n                        <td>{item.id}</td>\r\n                        <td>{item.price}</td>\r\n                        <td>{item.quantity}</td>\r\n                        <td>{item.dateOfPurchase}</td>\r\n                    </tr>\r\n\r\n                ))}\r\n            </tbody>\r\n        </table>   \r\n     </div>\r\n\r\n   )\r\n}\r\n\r\nexport default HistoryPage\r\n","import React, { Suspense } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport Auth from \"../hoc/auth\";\n// pages for this product\nimport LandingPage from \"./views/LandingPage/LandingPage\";\nimport LoginPage from \"./views/LoginPage/LoginPage\";\nimport RegisterPage from \"./views/RegisterPage/RegisterPage\";\nimport NavBar from \"./views/NavBar/NavBar\";\nimport Footer from \"./views/Footer/Footer\"\nimport UploadProductPage from \"./views/UploadProductPage/UploadProductPage\";\nimport DetailProductPage from './views/DetailProductPage/DetailProductPage';\nimport CartPage from './views/CartPage/CartPage';\nimport HistoryPage from './views/HistoryPage/HistoryPage';\n\n\n//step 2 UloadPage Router 만들기\n//null   Anyone Can go inside\n//true   only logged in user can go inside\n//false  logged in user can't go inside\n\nfunction App() {\n  return (\n    <Suspense fallback={(<div>Loading...</div>)}>\n      <NavBar />\n      <div style={{ paddingTop: '69px', minHeight: 'calc(100vh - 80px)' }}>\n        <Switch>\n          <Route exact path=\"/\" component={Auth(LandingPage, null)} />\n          <Route exact path=\"/login\" component={Auth(LoginPage, false)} />\n          <Route exact path=\"/register\" component={Auth(RegisterPage, false)} />\n        \n          <Route exact path=\"/product/upload\" component={Auth(UploadProductPage, true)} />\n          <Route exact path=\"/product/:productId\" component={Auth(DetailProductPage, null)} />\n          {/* :productId 는 각image의 id 가 dynamic하게 변경 , null : 아무나 들어갈수있게, true: 로그인된 사람만 가능*/}\n        \n          <Route exact path=\"/user/cart\" component={Auth(CartPage, true)} />\n          <Route exact path=\"/history\" component={Auth(HistoryPage, true)} />\n        </Switch>\n      </div>\n      <Footer />\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user_reducer';\n\nconst rootReducer = combineReducers({\n    user,\n});\n\nexport default rootReducer;","import {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n    ADD_TO_CART,\n    GET_CART_ITEMS,\n    REMOVE_CART_ITEM,\n    ON_SUCCESS_BUY\n} from '../_actions/types';\n//import { onSuccessBuy } from '../_actions/user_actions';\n\n \n\nexport default function(state={},action){\n    switch(action.type){\n        case REGISTER_USER:\n            return {...state, register: action.payload }\n        case LOGIN_USER:\n            return { ...state, loginSucces: action.payload }\n        case AUTH_USER:\n            return {...state, userData: action.payload }\n        case LOGOUT_USER:\n            return {...state }\n        case ADD_TO_CART:\n              return {...state,\n                        userData:{\n                             ...state.userData,  \n                             //원래있던 useData넣기\n                             cart:action.payload  \n                            //cart에 넣기,action.payload= users.js의 userInfo.cart <=   res.status(200).send(userInfo.cart)\n               }\n            }\n        case GET_CART_ITEMS:\n            //4) user_actions.js 의 return response.data가 cartDetail:action.payload로 들어오게 됨\n            return {...state,cartDetail:action.payload}\n            //4) user_actions.js 의 return response.data가 cartDetail:action.payload로 들어오게 됨\n        case REMOVE_CART_ITEM:\n            return {...state,cartDetail:action.payload.productInfo,\n                              userData:{\n                                  ...state.userData,     \n                                  cart: action.payload.cart \n                              }\n            }\n         case ON_SUCCESS_BUY:\n             return {...state,cartDetail:action.payload.cartDetail,\n                userData:{\n                    ...state.userData,cart:action.payload.cart      \n                }\n                \n            }\n            //router.post('/successBuy',auth,(req,res) => { }처리후 state값 채우기,routes/user.js의 action.payload.cartDetail = cartDetail[]\n            //처리후 cartPage.js 가기\n        default:\n            return state;\n    }\n}","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11';\nimport 'core-js';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Reducer from './_reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport promiseMiddleware from 'redux-promise';\nimport ReduxThunk from 'redux-thunk';\n\nconst createStoreWithMiddleware = applyMiddleware(promiseMiddleware, ReduxThunk)(createStore);\n\nReactDOM.render(\n    <Provider\n        store={createStoreWithMiddleware(\n            Reducer,\n            window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__()\n        )}\n    >\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}