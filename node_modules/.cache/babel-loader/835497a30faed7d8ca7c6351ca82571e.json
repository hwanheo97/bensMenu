{"ast":null,"code":"import { LOGIN_USER, REGISTER_USER, AUTH_USER, LOGOUT_USER, ADD_TO_CART, GET_CART_ITEMS, REMOVE_CART_ITEM, ON_SUCCESS_BUY } from '../_actions/types'; //import { onSuccessBuy } from '../_actions/user_actions';\n\nexport default function (state = {}, action) {\n  switch (action.type) {\n    case REGISTER_USER:\n      return { ...state,\n        register: action.payload\n      };\n\n    case LOGIN_USER:\n      return { ...state,\n        loginSucces: action.payload\n      };\n\n    case AUTH_USER:\n      return { ...state,\n        userData: action.payload\n      };\n\n    case LOGOUT_USER:\n      return { ...state\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        userData: { ...state.userData,\n          //원래있던 useData넣기\n          cart: action.payload //cart넣기, users.js의 userInfo,cart <= res.status(400).send(userInfo.cart)\n\n        }\n      };\n\n    case GET_CART_ITEMS:\n      //4) user_actions.js 의 return response.data가 cartDetail:action.payload로 들어오게 됨\n      return { ...state,\n        cartDetail: action.payload\n      };\n    //4) user_actions.js 의 return response.data가 cartDetail:action.payload로 들어오게 됨\n\n    case REMOVE_CART_ITEM:\n      return { ...state,\n        cartDetail: action.payload.productInfo,\n        userData: { ...state.userData,\n          //기존 userData는 그대로 뿌려주기\n          cart: action.payload.cart //\n\n        }\n      };\n\n    case ON_SUCCESS_BUY:\n      return { ...state,\n        cartDetail: action.payload.cartDetail,\n        userData: { ...state.userData,\n          cart: action.payload.cart //routes/user.js의 cart:user.cart,\n\n        }\n      };\n    //router.post('/successBuy',auth,(req,res) => { }처리후 state값 채우기,routes/user.js의 action.payload.cartDetail = cartDetail[]\n    //처리후 cartPage.js 가기\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/boilerplate-mern-stack-master/client/src/_reducers/user_reducer.js"],"names":["LOGIN_USER","REGISTER_USER","AUTH_USER","LOGOUT_USER","ADD_TO_CART","GET_CART_ITEMS","REMOVE_CART_ITEM","ON_SUCCESS_BUY","state","action","type","register","payload","loginSucces","userData","cart","cartDetail","productInfo"],"mappings":"AAAA,SACIA,UADJ,EAEIC,aAFJ,EAGIC,SAHJ,EAIIC,WAJJ,EAKIC,WALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,cARJ,QASO,mBATP,C,CAUA;;AAIA,eAAe,UAASC,KAAK,GAAC,EAAf,EAAkBC,MAAlB,EAAyB;AACpC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAWG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAA5B,OAAP;;AACJ,SAAKZ,UAAL;AACI,aAAO,EAAE,GAAGQ,KAAL;AAAYK,QAAAA,WAAW,EAAEJ,MAAM,CAACG;AAAhC,OAAP;;AACJ,SAAKV,SAAL;AACI,aAAO,EAAC,GAAGM,KAAJ;AAAWM,QAAAA,QAAQ,EAAEL,MAAM,CAACG;AAA5B,OAAP;;AACJ,SAAKT,WAAL;AACI,aAAO,EAAC,GAAGK;AAAJ,OAAP;;AACJ,SAAKJ,WAAL;AACM,aAAO,EAAC,GAAGI,KAAJ;AACGM,QAAAA,QAAQ,EAAC,EACJ,GAAGN,KAAK,CAACM,QADL;AAEJ;AACAC,UAAAA,IAAI,EAACN,MAAM,CAACG,OAHR,CAIL;;AAJK;AADZ,OAAP;;AAQN,SAAKP,cAAL;AACI;AACA,aAAO,EAAC,GAAGG,KAAJ;AAAUQ,QAAAA,UAAU,EAACP,MAAM,CAACG;AAA5B,OAAP;AACA;;AACJ,SAAKN,gBAAL;AACI,aAAO,EAAC,GAAGE,KAAJ;AAAUQ,QAAAA,UAAU,EAACP,MAAM,CAACG,OAAP,CAAeK,WAApC;AACWH,QAAAA,QAAQ,EAAC,EACL,GAAGN,KAAK,CAACM,QADJ;AACkB;AACvBC,UAAAA,IAAI,EAAEN,MAAM,CAACG,OAAP,CAAeG,IAFhB,CAEuB;;AAFvB;AADpB,OAAP;;AAMH,SAAKR,cAAL;AACI,aAAO,EAAC,GAAGC,KAAJ;AAAUQ,QAAAA,UAAU,EAACP,MAAM,CAACG,OAAP,CAAeI,UAApC;AACJF,QAAAA,QAAQ,EAAC,EACL,GAAGN,KAAK,CAACM,QADJ;AACaC,UAAAA,IAAI,EAACN,MAAM,CAACG,OAAP,CAAeG,IADjC,CAC4C;;AAD5C;AADL,OAAP;AAKA;AACD;;AACJ;AACI,aAAOP,KAAP;AAtCR;AAwCH","sourcesContent":["import {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n    ADD_TO_CART,\n    GET_CART_ITEMS,\n    REMOVE_CART_ITEM,\n    ON_SUCCESS_BUY\n} from '../_actions/types';\n//import { onSuccessBuy } from '../_actions/user_actions';\n\n \n\nexport default function(state={},action){\n    switch(action.type){\n        case REGISTER_USER:\n            return {...state, register: action.payload }\n        case LOGIN_USER:\n            return { ...state, loginSucces: action.payload }\n        case AUTH_USER:\n            return {...state, userData: action.payload }\n        case LOGOUT_USER:\n            return {...state }\n        case ADD_TO_CART:\n              return {...state,\n                        userData:{\n                             ...state.userData,  \n                             //원래있던 useData넣기\n                             cart:action.payload  \n                            //cart넣기, users.js의 userInfo,cart <= res.status(400).send(userInfo.cart)\n               }\n            }\n        case GET_CART_ITEMS:\n            //4) user_actions.js 의 return response.data가 cartDetail:action.payload로 들어오게 됨\n            return {...state,cartDetail:action.payload}\n            //4) user_actions.js 의 return response.data가 cartDetail:action.payload로 들어오게 됨\n        case REMOVE_CART_ITEM:\n            return {...state,cartDetail:action.payload.productInfo,\n                              userData:{\n                                  ...state.userData,     //기존 userData는 그대로 뿌려주기\n                                  cart: action.payload.cart   //\n                              }\n            }\n         case ON_SUCCESS_BUY:\n             return {...state,cartDetail:action.payload.cartDetail,\n                userData:{\n                    ...state.userData,cart:action.payload.cart       //routes/user.js의 cart:user.cart,\n                }\n                \n            }//router.post('/successBuy',auth,(req,res) => { }처리후 state값 채우기,routes/user.js의 action.payload.cartDetail = cartDetail[]\n            //처리후 cartPage.js 가기\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}