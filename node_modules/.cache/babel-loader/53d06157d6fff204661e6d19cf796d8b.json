{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_USER, REGISTER_USER, AUTH_USER, LOGOUT_USER, ADD_TO_CART, GET_CART_ITEMS } from './types';\nimport { USER_SERVER } from '../components/Config.js';\nimport { response } from 'express';\nexport function registerUser(dataToSubmit) {\n  const request = axios.post(`${USER_SERVER}/register`, dataToSubmit).then(response => response.data);\n  return {\n    type: REGISTER_USER,\n    payload: request\n  };\n}\nexport function loginUser(dataToSubmit) {\n  const request = axios.post(`${USER_SERVER}/login`, dataToSubmit).then(response => response.data);\n  return {\n    type: LOGIN_USER,\n    payload: request\n  };\n}\nexport function auth() {\n  const request = axios.get(`${USER_SERVER}/auth`).then(response => response.data);\n  return {\n    type: AUTH_USER,\n    payload: request\n  };\n}\nexport function logoutUser() {\n  const request = axios.get(`${USER_SERVER}/logout`).then(response => response.data);\n  return {\n    type: LOGOUT_USER,\n    payload: request\n  };\n}\nexport function addToCart(id) {\n  let body = {\n    productId: id\n  }; //body를넣고 addToCart end point를 backend로(routes/users.js) 보내기(21.9/8)\n\n  const request = axios.post(`${USER_SERVER}/addToCart`, body).then(response => response.data); //request를 받아 reducer.js로 가기\n\n  return {\n    type: ADD_TO_CART,\n    payload: request\n  };\n}\nexport function getCartItems(cartItems, userCart) {\n  const request = axios.get(`/api/product/products_by_id?id={cartItems}&type=array`, body).then(response => {\n    //routes/product.js에서 request받아와서\n    //CartIiem들에 해당하는 정보들을 Product Collection에서 가져온후 qiantity정보를 넣어준다\n    userCart.forEach(cartItem => {\n      response.data.forEach((productDetail, index) => {\n        if (cartItem.id === productDetail._id) {\n          response.data[index].quantity = cartItem.quantity;\n        }\n      });\n    });\n    return response.data; //return 후 user_reducer.js 로 가기\n  }); //request를 받아 reducer.js로 가기\n\n  return {\n    type: GET_CART_ITEMS,\n    payload: request\n  };\n}","map":{"version":3,"sources":["C:/boilerplate-mern-stack-master/client/src/_actions/user_actions.js"],"names":["axios","LOGIN_USER","REGISTER_USER","AUTH_USER","LOGOUT_USER","ADD_TO_CART","GET_CART_ITEMS","USER_SERVER","response","registerUser","dataToSubmit","request","post","then","data","type","payload","loginUser","auth","get","logoutUser","addToCart","id","body","productId","getCartItems","cartItems","userCart","forEach","cartItem","productDetail","index","_id","quantity"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,UADJ,EAEIC,aAFJ,EAGIC,SAHJ,EAIIC,WAJJ,EAKIC,WALJ,EAMIC,cANJ,QAOO,SAPP;AAQA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,OAAO,SAASC,YAAT,CAAsBC,YAAtB,EAAmC;AACtC,QAAMC,OAAO,GAAGX,KAAK,CAACY,IAAN,CAAY,GAAEL,WAAY,WAA1B,EAAqCG,YAArC,EACXG,IADW,CACNL,QAAQ,IAAIA,QAAQ,CAACM,IADf,CAAhB;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAEb,aADH;AAEHc,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH;AAED,OAAO,SAASM,SAAT,CAAmBP,YAAnB,EAAgC;AACnC,QAAMC,OAAO,GAAGX,KAAK,CAACY,IAAN,CAAY,GAAEL,WAAY,QAA1B,EAAkCG,YAAlC,EACHG,IADG,CACEL,QAAQ,IAAIA,QAAQ,CAACM,IADvB,CAAhB;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAEd,UADH;AAEHe,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH;AAED,OAAO,SAASO,IAAT,GAAe;AAClB,QAAMP,OAAO,GAAGX,KAAK,CAACmB,GAAN,CAAW,GAAEZ,WAAY,OAAzB,EACfM,IADe,CACVL,QAAQ,IAAIA,QAAQ,CAACM,IADX,CAAhB;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAEZ,SADH;AAEHa,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH;AAED,OAAO,SAASS,UAAT,GAAqB;AACxB,QAAMT,OAAO,GAAGX,KAAK,CAACmB,GAAN,CAAW,GAAEZ,WAAY,SAAzB,EACfM,IADe,CACVL,QAAQ,IAAIA,QAAQ,CAACM,IADX,CAAhB;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAEX,WADH;AAEHY,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH;AAED,OAAO,SAASU,SAAT,CAAmBC,EAAnB,EAAsB;AAEzB,MAAIC,IAAI,GAAG;AACPC,IAAAA,SAAS,EAAEF;AADJ,GAAX,CAFyB,CAKzB;;AACA,QAAMX,OAAO,GAAGX,KAAK,CAACY,IAAN,CAAY,GAAEL,WAAY,YAA1B,EAAsCgB,IAAtC,EACfV,IADe,CACVL,QAAQ,IAAIA,QAAQ,CAACM,IADX,CAAhB,CANyB,CASzB;;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEV,WADH;AAEHW,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAKH;AAED,OAAO,SAASc,YAAT,CAAsBC,SAAtB,EAAgCC,QAAhC,EAAyC;AAE5C,QAAMhB,OAAO,GAAGX,KAAK,CAACmB,GAAN,CAAW,uDAAX,EAAkEI,IAAlE,EACfV,IADe,CACVL,QAAQ,IAAI;AACd;AACA;AAEAmB,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,QAAQ,IAAI;AACzBrB,MAAAA,QAAQ,CAACM,IAAT,CAAcc,OAAd,CAAsB,CAACE,aAAD,EAAgBC,KAAhB,KAA0B;AAC5C,YAAGF,QAAQ,CAACP,EAAT,KAAgBQ,aAAa,CAACE,GAAjC,EAAqC;AACjCxB,UAAAA,QAAQ,CAACM,IAAT,CAAciB,KAAd,EAAqBE,QAArB,GAA+BJ,QAAQ,CAACI,QAAxC;AACH;AACJ,OAJD;AAKD,KANH;AAOE,WAAOzB,QAAQ,CAACM,IAAhB,CAXY,CAYZ;AACL,GAde,CAAhB,CAF4C,CAkB5C;;AACA,SAAO;AACHC,IAAAA,IAAI,EAAET,cADH;AAEHU,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAKH","sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n    ADD_TO_CART,\n    GET_CART_ITEMS\n} from './types';\nimport { USER_SERVER } from '../components/Config.js';\nimport { response } from 'express';\n\nexport function registerUser(dataToSubmit){\n    const request = axios.post(`${USER_SERVER}/register`,dataToSubmit)\n        .then(response => response.data);\n    \n    return {\n        type: REGISTER_USER,\n        payload: request\n    }\n}\n\nexport function loginUser(dataToSubmit){\n    const request = axios.post(`${USER_SERVER}/login`,dataToSubmit)\n                .then(response => response.data);\n\n    return {\n        type: LOGIN_USER,\n        payload: request\n    }\n}\n\nexport function auth(){\n    const request = axios.get(`${USER_SERVER}/auth`)\n    .then(response => response.data);\n\n    return {\n        type: AUTH_USER,\n        payload: request\n    }\n}\n\nexport function logoutUser(){\n    const request = axios.get(`${USER_SERVER}/logout`)\n    .then(response => response.data);\n\n    return {\n        type: LOGOUT_USER,\n        payload: request\n    }\n}\n\nexport function addToCart(id){\n\n    let body = {\n        productId :id   \n    }\n    //body를넣고 addToCart end point를 backend로(routes/users.js) 보내기(21.9/8)\n    const request = axios.post(`${USER_SERVER}/addToCart`,body)\n    .then(response => response.data);\n    \n    //request를 받아 reducer.js로 가기\n    return {\n        type: ADD_TO_CART,\n        payload: request\n        \n    }\n}\n\nexport function getCartItems(cartItems,userCart){\n\n    const request = axios.get(`/api/product/products_by_id?id={cartItems}&type=array`,body)\n    .then(response => {\n        //routes/product.js에서 request받아와서\n        //CartIiem들에 해당하는 정보들을 Product Collection에서 가져온후 qiantity정보를 넣어준다\n        \n        userCart.forEach(cartItem => {\n            response.data.forEach((productDetail, index) => {\n                if(cartItem.id === productDetail._id){\n                    response.data[index].quantity= cartItem.quantity\n                }\n            })\n          })\n          return response.data;\n          //return 후 user_reducer.js 로 가기\n    });\n    \n    //request를 받아 reducer.js로 가기\n    return {\n        type: GET_CART_ITEMS,\n        payload: request\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}