{"ast":null,"code":"var _jsxFileName = \"C:\\\\boilerplate-mern-stack-master\\\\client\\\\src\\\\components\\\\views\\\\CartPage\\\\CartPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getCartItems, removeCartItem } from '../../../_actions/user_actions';\nimport UserCardBlock from './Sections/UserCardBlock';\n\nfunction CartPage(props) {\n  const dispatch = useDispatch();\n  const [Total, setTotal] = useState(0);\n  useEffect(() => {\n    let cartItems = []; //redux User state안에 cart안에 상품이 들어있는 지 확인\n\n    if (props.user.userData && props.user.userData.cart) {\n      if (props.user.userData.cart.length > 0) {\n        props.user.userData.cart.forEach(item => {\n          cartItems.push(item.id);\n        });\n        dispatch(getCartItems(cartItems, props.user.userData.cart)).then(response => {\n          calculateTotal(response.payload);\n        });\n      }\n    }\n  }, [props.user.userData]);\n\n  let calculateTotal = cartDetail => {\n    let total = 0; //Objects, {} in JavaScript does not have the method .map(). It's only for Arrays, [].\n    //→ 오브젝트는 map()함수를 가지고있지 않아 사용할 수가 없다. 배열만 가능하다.\n    //→ data.map()으로 썻으면 data.product.map()으로 코드를 바꿔라 왜냐면 product가 배열이니깐 잘 반복될거야\n\n    cartDetail.product.map(item => {\n      total += parseInt(item.price, 10) * item.quantity;\n    });\n    setTotal(total);\n  };\n\n  let removeFromCart = productId => {\n    //2) redux action =removeCartItem  => user_actions.js의 export function removeCartItem\n    dispatch(removeCartItem(productId)).then(response => {});\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '85%',\n      margin: '3rem auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"My Cart \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserCardBlock, {\n    products: props.user.cartDetail && props.user.cartDetail.product,\n    removeItem: removeFromCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '3rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Total Amount : $\", Total)));\n}\n\nexport default CartPage;","map":{"version":3,"sources":["C:/boilerplate-mern-stack-master/client/src/components/views/CartPage/CartPage.js"],"names":["React","useEffect","useState","useDispatch","getCartItems","removeCartItem","UserCardBlock","CartPage","props","dispatch","Total","setTotal","cartItems","user","userData","cart","length","forEach","item","push","id","then","response","calculateTotal","payload","cartDetail","total","product","map","parseInt","price","quantity","removeFromCart","productId","width","margin","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,YAAR,EAAsBC,cAAtB,QAA2C,gCAA3C;AACA,OAAOC,aAAP,MAA0B,0BAA1B;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAEvB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAM,CAACO,KAAD,EAAOC,QAAP,IAAkBT,QAAQ,CAAC,CAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAK;AAEb,QAAIW,SAAS,GAAG,EAAhB,CAFa,CAIb;;AACA,QAAGJ,KAAK,CAACK,IAAN,CAAWC,QAAX,IAAuBN,KAAK,CAACK,IAAN,CAAWC,QAAX,CAAoBC,IAA9C,EAAmD;AAC/C,UAAGP,KAAK,CAACK,IAAN,CAAWC,QAAX,CAAoBC,IAApB,CAAyBC,MAAzB,GAAkC,CAArC,EAAuC;AACrCR,QAAAA,KAAK,CAACK,IAAN,CAAWC,QAAX,CAAoBC,IAApB,CAAyBE,OAAzB,CAAiCC,IAAI,IAAI;AACrCN,UAAAA,SAAS,CAACO,IAAV,CAAeD,IAAI,CAACE,EAApB;AACH,SAFD;AAGAX,QAAAA,QAAQ,CAACL,YAAY,CAACQ,SAAD,EAAYJ,KAAK,CAACK,IAAN,CAAWC,QAAX,CAAoBC,IAAhC,CAAb,CAAR,CACGM,IADH,CACQC,QAAQ,IAAI;AAACC,UAAAA,cAAc,CAACD,QAAQ,CAACE,OAAV,CAAd;AAAiC,SADtD;AAEF;AACH;AACF,GAdQ,EAcP,CAAChB,KAAK,CAACK,IAAN,CAAWC,QAAZ,CAdO,CAAT;;AAgBA,MAAIS,cAAc,GAAGE,UAAD,IAAe;AACjC,QAAIC,KAAK,GAAE,CAAX,CADiC,CAErC;AACA;AACA;;AAEID,IAAAA,UAAU,CAACE,OAAX,CAAmBC,GAAnB,CAAuBV,IAAI,IAAI;AAC7BQ,MAAAA,KAAK,IAAIG,QAAQ,CAACX,IAAI,CAACY,KAAN,EAAa,EAAb,CAAR,GAA2BZ,IAAI,CAACa,QAAzC;AACD,KAFD;AAGApB,IAAAA,QAAQ,CAACe,KAAD,CAAR;AACD,GAVD;;AAYA,MAAIM,cAAc,GAAIC,SAAD,IAAe;AAClC;AACAxB,IAAAA,QAAQ,CAACJ,cAAc,CAAC4B,SAAD,CAAf,CAAR,CACCZ,IADD,CACMC,QAAQ,IAAG,CAEhB,CAHD;AAID,GAND;;AAQA,sBACE;AAAK,IAAA,KAAK,EAAE;AAACY,MAAAA,KAAK,EAAC,KAAP;AAAcC,MAAAA,MAAM,EAAC;AAArB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAE3B,KAAK,CAACK,IAAN,CAAWY,UAAX,IAA0BjB,KAAK,CAACK,IAAN,CAAWY,UAAX,CAAsBE,OAAzE;AAAkF,IAAA,UAAU,EAAEK,cAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFJ,eAQI;AAAK,IAAA,KAAK,EAAE;AAACI,MAAAA,SAAS,EAAC;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqB1B,KAArB,CADF,CARJ,CADF;AAeD;;AAED,eAAeH,QAAf","sourcesContent":["import React, {useEffect, useState } from 'react'\r\nimport {useDispatch} from 'react-redux';\r\nimport {getCartItems, removeCartItem} from '../../../_actions/user_actions';\r\nimport UserCardBlock from './Sections/UserCardBlock';\r\n\r\nfunction CartPage(props) {\r\n \r\n  const dispatch = useDispatch();\r\n\r\n  const [Total,setTotal] =useState(0)\r\n  \r\n  useEffect(() =>{\r\n   \r\n    let cartItems = []\r\n\r\n    //redux User state안에 cart안에 상품이 들어있는 지 확인\r\n    if(props.user.userData && props.user.userData.cart){\r\n        if(props.user.userData.cart.length > 0){\r\n          props.user.userData.cart.forEach(item => {\r\n              cartItems.push(item.id)\r\n          })\r\n          dispatch(getCartItems(cartItems, props.user.userData.cart))\r\n            .then(response => {calculateTotal(response.payload)})\r\n       }\r\n    }\r\n  },[props.user.userData])\r\n\r\n  let calculateTotal =(cartDetail) =>{\r\n    let total =0;\r\n//Objects, {} in JavaScript does not have the method .map(). It's only for Arrays, [].\r\n//→ 오브젝트는 map()함수를 가지고있지 않아 사용할 수가 없다. 배열만 가능하다.\r\n//→ data.map()으로 썻으면 data.product.map()으로 코드를 바꿔라 왜냐면 product가 배열이니깐 잘 반복될거야\r\n\r\n    cartDetail.product.map(item => {\r\n      total += parseInt(item.price, 10) * item.quantity\r\n    })\r\n    setTotal(total)\r\n  }\r\n\r\n  let removeFromCart = (productId) => {\r\n    //2) redux action =removeCartItem  => user_actions.js의 export function removeCartItem\r\n    dispatch(removeCartItem(productId))\r\n    .then(response =>{\r\n\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div style={{width:'85%', margin:'3rem auto'}}>\r\n        <h1>My Cart </h1>\r\n        <div>\r\n          \r\n          <UserCardBlock products={props.user.cartDetail  && props.user.cartDetail.product} removeItem={removeFromCart}/>\r\n          {/* //3)redux 간단하게 product.js수정경우  && props.user.cartDetail.product 없애도 됨 */}\r\n        </div>\r\n          {/* //합계금액 UI만들기 */}\r\n        <div style={{marginTop:'3rem'}}>\r\n          <h2>Total Amount : ${Total}</h2>\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CartPage\r\n"]},"metadata":{},"sourceType":"module"}