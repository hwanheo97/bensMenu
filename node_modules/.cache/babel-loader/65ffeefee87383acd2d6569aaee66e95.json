{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_USER, REGISTER_USER, AUTH_USER, LOGOUT_USER, ADD_TO_CART, GET_CART_ITEMS, REMOVE_CART_ITEM, ON_SUCCESS_BUY } from './types';\nimport { USER_SERVER } from '../components/Config.js'; //import { response } from 'express';  \n\nexport function registerUser(dataToSubmit) {\n  const request = axios.post(`${USER_SERVER}/register`, dataToSubmit).then(response => response.data);\n  return {\n    type: REGISTER_USER,\n    payload: request\n  };\n}\nexport function loginUser(dataToSubmit) {\n  const request = axios.post(`${USER_SERVER}/login`, dataToSubmit, {\n    withCredentials: true\n  }).then(response => response.data);\n  return {\n    type: LOGIN_USER,\n    payload: request\n  };\n}\nexport function auth() {\n  const request = axios.get(`${USER_SERVER}/auth`, {\n    withCredentials: true\n  }).then(response => response.data);\n  return {\n    type: AUTH_USER,\n    payload: request\n  };\n}\nexport function logoutUser() {\n  const request = axios.get(`${USER_SERVER}/logout`, {\n    withCredentials: true\n  }).then(response => response.data);\n  return {\n    type: LOGOUT_USER,\n    payload: request\n  };\n}\nexport function addToCart(id) {\n  let body = {\n    productId: id\n  }; //body를넣고 addToCart end point를 backend로(routes/users.js) 보내기(21.9/8)\n\n  const request = axios.post(`${USER_SERVER}/addToCart`, body, {\n    withCredentials: true\n  }).then(response => response.data); //request를 받아 reducer.js로 가기\n\n  return {\n    type: ADD_TO_CART,\n    payload: request\n  };\n}\nexport function getCartItems(cartItems, userCart) {\n  const request = axios.get(`https://bensmenu.herokuapp.com/api/product/products_by_id?id=${cartItems}&type=array`).then(response => {\n    //routes/product.js에서 request받아와서\n    //CartIiem들에 해당하는 정보들을 Product Collection에서 가져온후 qiantity정보를 넣어준다\n    //error 3)redux 간단하게 product.js수정경우 data. 의product 없애도 됨\n    userCart.forEach(cartItem => {\n      response.data.forEach((productDetail, index) => {\n        if (cartItem.id === productDetail._id) {\n          response.data[index].quantity = cartItem.quantity; //3)redux 간단하게 product.js수정경우 product 없애도 됨\n        }\n      });\n    });\n    return response.data; //return 후 user_reducer.js 로 가기\n  }); //request를 받아 reducer.js로 가기\n\n  return {\n    type: GET_CART_ITEMS,\n    payload: request\n  };\n}\nexport function removeCartItem(productId) {\n  const request = axios.get(`https://bensmenu.herokuapp.com/api/users/removeFromCart?id=${productId}`, {\n    withCredentials: true\n  }).then(response => {\n    //routes/user.js에서 request받아와서\n    //productInfo,cart 정보를 조합해서 cartDetail을 만들기  => user_reducer로 \n    response.data.cart.forEach(item => {\n      response.data.productInfo.forEach((product, index) => {\n        if (item.id === product._id) {\n          response.data.productInfo[index].quantity = item.quantity;\n        }\n      });\n    });\n    return response.data; //return 후 user_reducer.js 로 가기\n  }); //3)request를 받아 reducer.js로 가기\n\n  return {\n    type: REMOVE_CART_ITEM,\n    payload: request\n  };\n} //CartPage 에서 dispatch한 두개 paymentData 와 cartDetail 을 data로받기,//end point와 data\n//3)request를 받아 reducer.js로 가기\n\nexport function onSuccessBuy(data) {\n  const request = axios.post(`https://bensmenu.herokuapp.com/api/users/successBuy`, data, {\n    withCredentials: true\n  }).then(response => response.data);\n  return {\n    type: ON_SUCCESS_BUY,\n    payload: request\n  };\n}","map":{"version":3,"sources":["C:/bensMenu/client/src/_actions/user_actions.js"],"names":["axios","LOGIN_USER","REGISTER_USER","AUTH_USER","LOGOUT_USER","ADD_TO_CART","GET_CART_ITEMS","REMOVE_CART_ITEM","ON_SUCCESS_BUY","USER_SERVER","registerUser","dataToSubmit","request","post","then","response","data","type","payload","loginUser","withCredentials","auth","get","logoutUser","addToCart","id","body","productId","getCartItems","cartItems","userCart","forEach","cartItem","productDetail","index","_id","quantity","removeCartItem","cart","item","productInfo","product","onSuccessBuy"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n    ADD_TO_CART,\n    GET_CART_ITEMS,\n    REMOVE_CART_ITEM,\n    ON_SUCCESS_BUY\n} from './types';\nimport { USER_SERVER } from '../components/Config.js';\n//import { response } from 'express';  \n\nexport function registerUser(dataToSubmit){\n    const request = axios.post(`${USER_SERVER}/register`,dataToSubmit)\n        .then(response => response.data);\n    \n    return {\n        type: REGISTER_USER,\n        payload: request\n    }\n}\n\nexport function loginUser(dataToSubmit){\n    const request = axios.post(`${USER_SERVER}/login`,dataToSubmit,{withCredentials:true})\n                .then(response => response.data);\n\n    return {\n        type: LOGIN_USER,\n        payload: request\n    }\n}\n\nexport function auth(){\n    const request = axios.get(`${USER_SERVER}/auth`, {withCredentials:true})\n    .then(response => response.data);\n\n    return {\n        type: AUTH_USER,\n        payload: request\n    }\n}\n\nexport function logoutUser(){\n    const request = axios.get(`${USER_SERVER}/logout`,{withCredentials:true})\n    .then(response => response.data);\n\n    return {\n        type: LOGOUT_USER,\n        payload: request\n    }\n}\n\nexport function addToCart(id){\n\n    let body = {\n        productId :id   \n    }\n    //body를넣고 addToCart end point를 backend로(routes/users.js) 보내기(21.9/8)\n    const request = axios.post(`${USER_SERVER}/addToCart`,body,{withCredentials:true})\n    .then(response => response.data);\n    \n    //request를 받아 reducer.js로 가기\n    return {\n        type: ADD_TO_CART,\n        payload: request\n        \n    }\n}\n\nexport function getCartItems(cartItems,userCart){\n\n    const request = axios.get(`https://bensmenu.herokuapp.com/api/product/products_by_id?id=${cartItems}&type=array`)\n    .then(response => {\n        //routes/product.js에서 request받아와서\n        //CartIiem들에 해당하는 정보들을 Product Collection에서 가져온후 qiantity정보를 넣어준다\n         //error 3)redux 간단하게 product.js수정경우 data. 의product 없애도 됨\n        userCart.forEach(cartItem => {\n            response.data.forEach((productDetail, index) => {  \n                if(cartItem.id === productDetail._id){\n                    response.data[index].quantity= cartItem.quantity  //3)redux 간단하게 product.js수정경우 product 없애도 됨\n                }\n            })\n          })\n          return response.data;\n        //return 후 user_reducer.js 로 가기\n    });\n    \n    //request를 받아 reducer.js로 가기\n    return {\n        type: GET_CART_ITEMS,\n        payload: request\n        \n    }\n}\nexport function removeCartItem(productId){\n\n    const request = axios.get(`https://bensmenu.herokuapp.com/api/users/removeFromCart?id=${productId}`,{withCredentials:true})\n    .then(response => {\n        //routes/user.js에서 request받아와서\n        \n        //productInfo,cart 정보를 조합해서 cartDetail을 만들기  => user_reducer로 \n        response.data.cart.forEach(item => {\n            response.data.productInfo.forEach((product,index) =>{\n                if(item.id === product._id){\n                    response.data.productInfo[index].quantity = item.quantity\n                }\n            })\n        })\n          return response.data;\n        //return 후 user_reducer.js 로 가기\n    });\n     //3)request를 받아 reducer.js로 가기\n    return {\n        type: REMOVE_CART_ITEM,\n        payload: request\n     }\n}\n//CartPage 에서 dispatch한 두개 paymentData 와 cartDetail 을 data로받기,//end point와 data\n   //3)request를 받아 reducer.js로 가기\nexport function onSuccessBuy(data){    \n    const request = axios.post(`https://bensmenu.herokuapp.com/api/users/successBuy`,data,{withCredentials:true})   \n    .then(response => response.data );\n     \n    return {\n        type: ON_SUCCESS_BUY,\n        payload: request\n     }\n}"]},"metadata":{},"sourceType":"module"}