{"ast":null,"code":"var _jsxFileName = \"C:\\\\bensMenu\\\\client\\\\src\\\\components\\\\views\\\\LandingPage\\\\LandingPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { FaCode } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport { Icon, Col, Card, Row, Carousel } from 'antd';\nimport Meta from 'antd/lib/card/Meta';\nimport ImageSlider from '../../utils/ImageSlider';\nimport CheckBox from './Sections/CheckBox';\nimport RadioBox from './Sections/RadioBox';\nimport SearchFeature from './Sections/SearchFeature';\nimport { countries, price } from './Sections/Datas';\n\nfunction LandingPage() {\n  const [Products, setProducts] = useState([]);\n  const [Skip, setSkip] = useState(0);\n  const [Limit, setLimit] = useState(4); // 4만 가겨오기\n\n  const [PostSize, setPostSize] = useState(0); //Filters  두개의 배열로 초기 state\n\n  const [Filters, setFilters] = useState({\n    continents: [],\n    price: []\n  });\n  const [SearchTerm, setSearchTerm] = useState(\"\");\n  useEffect(() => {\n    //rendering 이후 처리할 작업을 사용 용도 => DB에서 data를 가져온후 state화 하고 렌더링\n    //body에 넣어 request로 같이 보내기, 데이터베이스에서 정보를 갖고오기\n    let body = {\n      skip: Skip,\n      limit: Limit\n    }; //함수화 하여 호출\n\n    getProducts(body);\n  }, []);\n\n  const getProducts = body => {\n    axios.post('/api/product/products', body) // routes/product.js 에서 처리후 받기,\n    // 백엔드와 프런트엔드랑 통신을 쉽게 사용하기위해 사용하는 HTTP 비동기 통신 라이브러리\n    .then(response => {\n      if (response.data.success) {\n        console.log(response.data); //원래있는 product를 모두 넣고 , 추가의미\n\n        if (body.loadMore) {\n          setProducts([...Products, ...response.data.productInfo]);\n        } else {\n          setProducts(response.data.productInfo);\n        }\n\n        setPostSize(response.data.postSize);\n      } else {\n        alert(\"상품들을 가져오는데 실패 했습니다.\");\n      }\n    });\n  }; //더보기 버튼 이벤트\n\n\n  const loadMoreHandler = () => {\n    //더보기 버튼 누르면 0 + 8 그 다음 8 + 8\n    let skip = Skip + Limit; //  loadMore:true  더보기 눌렀을때 정보 추가하여 보내기\n\n    let body = {\n      skip: skip,\n      limit: Limit,\n      loadMore: true\n    }; //호출\n\n    getProducts(body); //증가되는 skip setState\n\n    setSkip(skip);\n  };\n\n  const renderCards = Products.map((product, index) => {\n    //console.log('product',product), row 크기 24, column 큰화면 6 x4개사진, 중간화면 8 x3개, 작은 화면 24개\n    //사진 여러장 돌리기 구현 위 해 InageSlider 자식 컴포넌트 만들기\n    return /*#__PURE__*/React.createElement(Col, {\n      lg: 6,\n      md: 8,\n      xs: 24,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      cover: /*#__PURE__*/React.createElement(\"a\", {\n        href: `/product/${product._id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 32\n        }\n      }, /*#__PURE__*/React.createElement(ImageSlider, {\n        images: product.images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 68\n        }\n      })) // a link 에 상품의 고유 id ${product._id} 로 href\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Meta, {\n      title: product.title,\n      description: `$${product.price}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    })));\n  });\n\n  const handlePrice = value => {\n    const data = price;\n    let array = []; //key  = 0,1,2,...\n\n    for (let key in data) {\n      if (data[key]._id === parseInt(value, 10)) {\n        //dada.js의 array,[0,199]등  , 클릭한 값과 같다면   \n        array = data[key].array; //같은 _id의 array  \n      }\n    }\n\n    return array;\n  };\n\n  const showFilteredResults = filters => {\n    let body = {\n      //첵크박스 클릭시 db 에서 처음으로 값 가져오기 skip:0(처음 부터 가져오기), Limit은 초기화 값 8 그대로\n      skip: 0,\n      limit: Limit,\n      filters: filters\n    }; //더보기 클릭시와 같이 관련값(upload된 것중) 가져오기 \n\n    getProducts(body);\n    setSkip(0);\n  }; // checked된 1,2, _id 가 filters에 담김\n\n\n  const handleFilters = (filters, category) => {\n    //모든 Filters를 newFilters로 복제, category 는 continents 와 Price\n    const newFilters = { ...Filters\n    }; // State에 있는 초기 Filters값 모두\n    // continents 나 price 배열을 가리킴, filters = _id값 [1,2,..] \n\n    newFilters[category] = filters; //예  [1,2,3]\n\n    console.log('filters', filters);\n\n    if (category === \"price\") {\n      let priceValues = handlePrice(filters);\n      newFilters[category] = priceValues; // priceValues [0,199]등  category = \"price\"\n    }\n\n    showFilteredResults(newFilters);\n    setFilters(newFilters); // continent, price 둘다표시되게\n  }; // newSearchTerm = event.currentTarget.value\n\n\n  const updateSearchTerm = newSearchTerm => {\n    let body = {\n      skip: 0,\n      limit: Limit,\n      filters: Filters,\n      //state 의 Filters\n      searchTerm: newSearchTerm\n    };\n    setSkip(0);\n    setSearchTerm(newSearchTerm);\n    getProducts(body);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '75%',\n      margin: '3rem auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, \" Ben's Menues\", /*#__PURE__*/React.createElement(Icon, {\n    type: \"rocket\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 38\n    }\n  }), \" \")), /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CheckBox, {\n    list: countries,\n    handleFilters: filters => handleFilters(filters, \"continents\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(RadioBox, {\n    list: price,\n    handleFilters: filters => handleFilters(filters, \"price\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      margin: '1rem auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SearchFeature, {\n    refreshFunction: updateSearchTerm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, renderCards), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }), PostSize >= Limit && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: loadMoreHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 24\n    }\n  }, \"\\uB354\\uBCF4\\uAE30\")));\n}\n\nexport default LandingPage;","map":{"version":3,"sources":["C:/bensMenu/client/src/components/views/LandingPage/LandingPage.js"],"names":["React","useEffect","useState","FaCode","axios","Icon","Col","Card","Row","Carousel","Meta","ImageSlider","CheckBox","RadioBox","SearchFeature","countries","price","LandingPage","Products","setProducts","Skip","setSkip","Limit","setLimit","PostSize","setPostSize","Filters","setFilters","continents","SearchTerm","setSearchTerm","body","skip","limit","getProducts","post","then","response","data","success","console","log","loadMore","productInfo","postSize","alert","loadMoreHandler","renderCards","map","product","index","_id","images","title","handlePrice","value","array","key","parseInt","showFilteredResults","filters","handleFilters","category","newFilters","priceValues","updateSearchTerm","newSearchTerm","searchTerm","width","margin","textAlign","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { FaCode } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport {Icon,Col,Card,Row,Carousel} from 'antd'\nimport Meta from 'antd/lib/card/Meta';\nimport ImageSlider from '../../utils/ImageSlider';\nimport CheckBox from './Sections/CheckBox';\nimport RadioBox from './Sections/RadioBox';\nimport SearchFeature from './Sections/SearchFeature';\nimport { countries,price } from './Sections/Datas';\n\nfunction LandingPage() {\n\n    const [Products, setProducts]  =  useState([])\n    const [Skip,setSkip] = useState(0)\n    const [Limit,setLimit] = useState(4)     // 4만 가겨오기\n    const [PostSize,setPostSize] = useState(0)\n    //Filters  두개의 배열로 초기 state\n    const [Filters,setFilters] = useState({\n        continents:[],\n        price: []\n    })\n    const [SearchTerm,setSearchTerm]  = useState(\"\")\n\n    useEffect(() => {\n       //rendering 이후 처리할 작업을 사용 용도 => DB에서 data를 가져온후 state화 하고 렌더링\n       //body에 넣어 request로 같이 보내기, 데이터베이스에서 정보를 갖고오기\n        let body = {\n            skip:Skip,\n            limit:Limit\n        }\n        //함수화 하여 호출\n        getProducts(body)   \n    },[])\n\n    const getProducts = (body) =>{\n        axios.post('/api/product/products',body)  // routes/product.js 에서 처리후 받기,\n        // 백엔드와 프런트엔드랑 통신을 쉽게 사용하기위해 사용하는 HTTP 비동기 통신 라이브러리\n            .then(response =>{\n                if(response.data.success){\n                    console.log(response.data)\n                      //원래있는 product를 모두 넣고 , 추가의미\n                   if(body.loadMore){\n                    setProducts([...Products, ...response.data.productInfo]) \n                   }else{\n                    setProducts(response.data.productInfo)\n                   }\n                    setPostSize(response.data.postSize)\n                }else{\n                    alert(\"상품들을 가져오는데 실패 했습니다.\")\n                }\n            })\n    }\n\n    //더보기 버튼 이벤트\n     const loadMoreHandler = () => {\n        //더보기 버튼 누르면 0 + 8 그 다음 8 + 8\n        let skip = Skip + Limit\n            //  loadMore:true  더보기 눌렀을때 정보 추가하여 보내기\n        let body = {\n            skip:skip,\n            limit:Limit,\n            loadMore:true\n        }\n        //호출\n        getProducts(body)\n        //증가되는 skip setState\n        setSkip(skip)\n    }\n\n    const renderCards = Products.map((product,index) => {\n        //console.log('product',product), row 크기 24, column 큰화면 6 x4개사진, 중간화면 8 x3개, 작은 화면 24개\n        //사진 여러장 돌리기 구현 위 해 InageSlider 자식 컴포넌트 만들기\n           return  <Col lg={6} md={8} xs={24} key={index}>     \n                    <Card\n                        cover={<a href={`/product/${product._id}`}><ImageSlider images={product.images} /></a>}\n                        // a link 에 상품의 고유 id ${product._id} 로 href\n                        >\n                        <Meta\n                            title={product.title}\n                            description={`$${product.price}`}\n                        ></Meta>\n                    </Card>\n                </Col>\n    })  \n\n    const handlePrice = (value) =>{\n        const data = price;\n        let array = [];\n        //key  = 0,1,2,...\n        for(let key in data){\n               if(data[key]._id === parseInt(value,10)){\n              //dada.js의 array,[0,199]등  , 클릭한 값과 같다면   \n                array = data[key].array;      //같은 _id의 array  \n            }\n        }\n        return array;\n    }\n\n    const showFilteredResults = (filters)  => {\n        let body = {\n            //첵크박스 클릭시 db 에서 처음으로 값 가져오기 skip:0(처음 부터 가져오기), Limit은 초기화 값 8 그대로\n            skip:0,\n            limit:Limit,\n            filters:filters\n        }\n        //더보기 클릭시와 같이 관련값(upload된 것중) 가져오기 \n        getProducts(body)\n        setSkip(0)\n    }\n\n    // checked된 1,2, _id 가 filters에 담김\n    const handleFilters = (filters,category)  =>{\n        //모든 Filters를 newFilters로 복제, category 는 continents 와 Price\n        const newFilters ={...Filters}   // State에 있는 초기 Filters값 모두\n       \n        // continents 나 price 배열을 가리킴, filters = _id값 [1,2,..] \n        newFilters[category]  = filters   //예  [1,2,3]\n   \n        console.log('filters',filters)\n           if(category ===\"price\"){\n            let priceValues = handlePrice(filters)\n            newFilters[category] = priceValues  \n            // priceValues [0,199]등  category = \"price\"\n        }\n        showFilteredResults(newFilters)\n        setFilters(newFilters)      // continent, price 둘다표시되게\n    }\n    // newSearchTerm = event.currentTarget.value\n    const updateSearchTerm = (newSearchTerm) =>{\n          let body = {\n            skip:0,\n            limit:Limit,\n            filters:Filters,  //state 의 Filters\n            searchTerm:newSearchTerm\n        }\n        setSkip(0)\n        setSearchTerm(newSearchTerm)\n        getProducts(body)\n    }\n   \n    return (\n        <div style={{width:'75%', margin:'3rem auto'}} > \n            <div style={{textAlign:'center'}}>\n                    <h2> Ben's Menues<Icon type=\"rocket\"></Icon> </h2>\n             </div>\n                {/* Filter */}\n                <Row gutter = {[16,16]}>\n                    <Col lg={12} xs={24}>\n                        {/* 열나누기 전체 24, 큰화면 12 x 2개 반응형으로 작은화면 24x 1만 나오게 */}\n                      {/* 1) CheckBox  list이름으로 continents 데이터 checkbox component에 내려주기, list =props */}\n                        <CheckBox list ={countries} handleFilters={filters => handleFilters(filters,\"continents\")} />\n                        {/* Datas.js 컾포넌트의 배열 continents 를 checkBox에 넣기 */}\n                    </Col>\n\n                    <Col lg={12} xs={24}>\n                        {/* RadioBox */}\n                        <RadioBox list ={price} handleFilters={filters => handleFilters(filters,\"price\")} />\n                    </Col>\n                </Row>\n\n\n                {/* Search */}\n                <div style={{display:'flex',justifyContent: 'flex-end',margin:'1rem auto'}}>\n                    <SearchFeature refreshFunction={updateSearchTerm}  />\n                    {/* props name정의 */}\n                </div>\n\n\n                {/* Cards ,gutter=margin 좌우간격 16 아래 간격 */}\n                <Row gutter={[16,16]}>\n                    {renderCards}\n                </Row>\n                <br/>\n                {/* productInfo.length = PostSize 가 8보다 크거나 같으면 더보기 버튼 보여주기  */}\n                {PostSize >= Limit &&\n                    <div style={{display:'flex', justifyContent:'center'}}>\n                       <button onClick={loadMoreHandler}>더보기</button>\n                     </div>\n                }\n        </div>\n    )\n}\nexport default LandingPage\n"]},"metadata":{},"sourceType":"module"}