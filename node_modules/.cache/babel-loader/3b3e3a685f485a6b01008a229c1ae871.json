{"ast":null,"code":"import _toConsumableArray from\"C:\\\\bensMenu\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\bensMenu\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Collapse,Checkbox}from'antd';var Panel=Collapse.Panel;function CheckBox(props){//  _id 를 check하면 state화  [1,2,..]\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),Checked=_useState2[0],setChecked=_useState2[1];var handleToggle=function handleToggle(value){//누른 것의 index를 구하고\nvar currentIndex=Checked.indexOf(value);//전체 Checked 된 State에서 현재누른 Checkbox 가 이미 있다면, spread operator syntax [...Checked]\nvar newChecked=_toConsumableArray(Checked);//-1 = 없으면 State 넣어준다,=> 클릭시 V 표시됨\nif(currentIndex===-1){newChecked.push(value);//넣어주고 => 클릭시 V 표시됨\n}else{//이미 있으면 지워주기\nnewChecked.splice(currentIndex,1);}setChecked(newChecked);//newChecked 셋후 부모 component LandingPage에 연결\nprops.handleFilters(newChecked);};var renderCheckboxLists=function renderCheckboxLists(){return props.list&&props.list.map(function(value,index){return/*#__PURE__*/React.createElement(React.Fragment,{key:index},/*#__PURE__*/React.createElement(Checkbox,{onChange:function onChange(){return handleToggle(value._id);},checked:Checked.indexOf(value._id)===-1?false:true},/*#__PURE__*/React.createElement(\"span\",{style:{marginRight:'1rem'}},value.name)));});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Collapse,{defaultActiveKey:['0']},/*#__PURE__*/React.createElement(Panel,{header:\"\\uBA54\\uB274\",key:\"1\"},renderCheckboxLists())));}export default CheckBox;","map":{"version":3,"sources":["C:/bensMenu/client/src/components/views/LandingPage/Sections/CheckBox.js"],"names":["React","useState","Collapse","Checkbox","Panel","CheckBox","props","Checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","handleFilters","renderCheckboxLists","list","map","index","_id","marginRight","name"],"mappings":"wSAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,QAAT,CAAkBC,QAAlB,KAAkC,MAAlC,C,GAEOC,CAAAA,K,CAAUF,Q,CAAVE,K,CAEP,QAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CACrB;AADqB,cAEOL,QAAQ,CAAC,EAAD,CAFf,wCAEdM,OAFc,eAENC,UAFM,eAIrB,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC5B;AACA,GAAMC,CAAAA,YAAY,CAAGJ,OAAO,CAACK,OAAR,CAAgBF,KAAhB,CAArB,CACA;AACA,GAAMG,CAAAA,UAAU,oBAAON,OAAP,CAAhB,CACA;AACA,GAAGI,YAAY,GAAK,CAAC,CAArB,CAAuB,CACnBE,UAAU,CAACC,IAAX,CAAgBJ,KAAhB,EACA;AACH,CAHD,IAGK,CACD;AACAG,UAAU,CAACE,MAAX,CAAkBJ,YAAlB,CAA+B,CAA/B,EACH,CACDH,UAAU,CAACK,UAAD,CAAV,CACA;AACAP,KAAK,CAACU,aAAN,CAAoBH,UAApB,EACH,CAhBD,CAkBA,GAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,SAAMX,CAAAA,KAAK,CAACY,IAAN,EAAcZ,KAAK,CAACY,IAAN,CAAWC,GAAX,CAAe,SAACT,KAAD,CAAOU,KAAP,qBAC3D,oBAAC,KAAD,CAAO,QAAP,EAAgB,GAAG,CAAEA,KAArB,eACI,oBAAC,QAAD,EAAU,QAAQ,CAAE,0BAAIX,CAAAA,YAAY,CAACC,KAAK,CAACW,GAAP,CAAhB,EAApB,CACI,OAAO,CAAEd,OAAO,CAACK,OAAR,CAAgBF,KAAK,CAACW,GAAtB,IAA8B,CAAC,CAA/B,CAAmC,KAAnC,CAA2C,IADxD,eAEI,4BAAM,KAAK,CAAE,CAACC,WAAW,CAAC,MAAb,CAAb,EAAoCZ,KAAK,CAACa,IAA1C,CAFJ,CADJ,CAD2D,EAAf,CAApB,EAA5B,CAQF,mBACE,4CACI,oBAAC,QAAD,EAAU,gBAAgB,CAAE,CAAC,GAAD,CAA5B,eACK,oBAAC,KAAD,EAAO,MAAM,CAAC,cAAd,CAAmB,GAAG,CAAC,GAAvB,EACGN,mBAAmB,EADtB,CADL,CADJ,CADF,CASD,CAED,cAAeZ,CAAAA,QAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { Collapse,Checkbox } from 'antd'\r\n\r\nconst {Panel}  = Collapse;\r\n\r\nfunction CheckBox(props) {\r\n    //  _id 를 check하면 state화  [1,2,..]\r\n    const [Checked,setChecked] =useState([])\r\n\r\n    const handleToggle = (value) => {\r\n        //누른 것의 index를 구하고\r\n        const currentIndex = Checked.indexOf(value)\r\n        //전체 Checked 된 State에서 현재누른 Checkbox 가 이미 있다면, spread operator syntax [...Checked]\r\n        const newChecked = [...Checked]\r\n        //-1 = 없으면 State 넣어준다,=> 클릭시 V 표시됨\r\n        if(currentIndex === -1){\r\n            newChecked.push(value)\r\n            //넣어주고 => 클릭시 V 표시됨\r\n        }else{\r\n            //이미 있으면 지워주기\r\n            newChecked.splice(currentIndex,1)\r\n        }\r\n        setChecked(newChecked)\r\n        //newChecked 셋후 부모 component LandingPage에 연결\r\n        props.handleFilters(newChecked)\r\n    }\r\n\r\n    const renderCheckboxLists = () => props.list && props.list.map((value,index) =>(\r\n        <React.Fragment key={index}>\r\n            <Checkbox onChange={()=>handleToggle(value._id)} \r\n                checked={Checked.indexOf(value._id)=== -1 ? false : true}  > \r\n                <span style={{marginRight:'1rem'}}>{value.name}</span>\r\n            </Checkbox>\r\n        </React.Fragment>\r\n    ))\r\n  return (\r\n    <div>\r\n        <Collapse defaultActiveKey={['0']} >\r\n             <Panel header=\"메뉴\" key=\"1\">  \r\n               {renderCheckboxLists()}\r\n            </Panel>\r\n        </Collapse>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CheckBox\r\n"]},"metadata":{},"sourceType":"module"}