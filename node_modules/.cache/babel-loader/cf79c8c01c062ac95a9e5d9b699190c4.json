{"ast":null,"code":"var _jsxFileName = \"C:\\\\boilerplate-mern-stack-master\\\\client\\\\src\\\\components\\\\views\\\\CartPage\\\\CartPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getCartItems, removeCartItem } from '../../../_actions/user_actions';\nimport UserCardBlock from './Sections/UserCardBlock';\nimport { Empty } from 'antd';\n\nfunction CartPage(props) {\n  const dispatch = useDispatch();\n  const [Total, setTotal] = useState(0);\n  const [ShowTotal, setShowTotal] = useState(false); // true일때만 가격 보여주기\n\n  useEffect(() => {\n    let cartItems = []; //redux User state안에 cart안에 상품이 들어있는 지 확인\n\n    if (props.user.userData && props.user.userData.cart) {\n      if (props.user.userData.cart.length > 0) {\n        props.user.userData.cart.forEach(item => {\n          cartItems.push(item.id);\n        });\n        dispatch(getCartItems(cartItems, props.user.userData.cart)).then(response => {\n          calculateTotal(response.payload);\n        });\n      }\n    }\n  }, [props.user.userData]);\n\n  let calculateTotal = cartDetail => {\n    let total = 0; //Objects, {} in JavaScript does not have the method .map(). It's only for Arrays, [].\n    //→ 오브젝트는 map()함수를 가지고있지 않아 사용할 수가 없다. 배열만 가능하다.\n    //→ data.map()으로 썻으면 data.product.map()으로 코드를 바꿔라 왜냐면 product가 배열이니깐 잘 반복될거야\n\n    cartDetail.product.map(item => {\n      total += parseInt(item.price, 10) * item.quantity;\n    });\n    setTotal(total);\n    setShowTotal(true);\n  };\n\n  let removeFromCart = productId => {\n    //2) redux action =removeCartItem  => user_actions.js의 export function removeCartItem\n    dispatch(removeCartItem(productId)).then(response => {\n      //console.log('remove버튼 response',response)\n      if (response.payload.productInfo.length <= 0) {\n        setShowTotal(false);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '85%',\n      margin: '3rem auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"My Cart \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserCardBlock, {\n    products: props.user.cartDetail && props.user.cartDetail.product,\n    removeItem: removeFromCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })), ShowTotal ?\n  /*#__PURE__*/\n  //{/* 합계금액 UI만들기 */}\n  React.createElement(\"div\", {\n    style: {\n      marginTop: '3rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, \"Total Amount : $\", Total)) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Empty, {\n    description: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }\n  }, \"\\uCE74\\uD2B8\\uC5D0 \\uC120\\uD0DD\\uD558\\uC2E0 \\uC0C1\\uD488\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"));\n}\n\nexport default CartPage;","map":{"version":3,"sources":["C:/boilerplate-mern-stack-master/client/src/components/views/CartPage/CartPage.js"],"names":["React","useEffect","useState","useDispatch","getCartItems","removeCartItem","UserCardBlock","Empty","CartPage","props","dispatch","Total","setTotal","ShowTotal","setShowTotal","cartItems","user","userData","cart","length","forEach","item","push","id","then","response","calculateTotal","payload","cartDetail","total","product","map","parseInt","price","quantity","removeFromCart","productId","productInfo","width","margin","marginTop","textAlign"],"mappings":"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","sourcesContent":["import React, {useEffect, useState } from 'react'\r\nimport {useDispatch} from 'react-redux';\r\nimport {getCartItems, removeCartItem} from '../../../_actions/user_actions';\r\nimport UserCardBlock from './Sections/UserCardBlock';\r\nimport { Empty } from 'antd';\r\n\r\n\r\nfunction CartPage(props) {\r\n \r\n  const dispatch = useDispatch();\r\n\r\n  const [Total,setTotal] =useState(0)\r\n  const [ShowTotal,setShowTotal] = useState(false) \r\n  // true일때만 가격 보여주기\r\n  \r\n  useEffect(() =>{\r\n   \r\n    let cartItems = []\r\n\r\n    //redux User state안에 cart안에 상품이 들어있는 지 확인\r\n    if(props.user.userData && props.user.userData.cart){\r\n        if(props.user.userData.cart.length > 0){\r\n          props.user.userData.cart.forEach(item => {\r\n              cartItems.push(item.id)\r\n          })\r\n          dispatch(getCartItems(cartItems, props.user.userData.cart))\r\n            .then(response => {calculateTotal(response.payload)})\r\n       }\r\n    }\r\n  },[props.user.userData])\r\n\r\n  let calculateTotal =(cartDetail) =>{\r\n    let total =0;\r\n//Objects, {} in JavaScript does not have the method .map(). It's only for Arrays, [].\r\n//→ 오브젝트는 map()함수를 가지고있지 않아 사용할 수가 없다. 배열만 가능하다.\r\n//→ data.map()으로 썻으면 data.product.map()으로 코드를 바꿔라 왜냐면 product가 배열이니깐 잘 반복될거야\r\n\r\n    cartDetail.product.map(item => {\r\n      total += parseInt(item.price, 10) * item.quantity\r\n    })\r\n    setTotal(total)\r\n    setShowTotal(true)\r\n  }\r\n\r\n  let removeFromCart = (productId) => {\r\n    //2) redux action =removeCartItem  => user_actions.js의 export function removeCartItem\r\n    dispatch(removeCartItem(productId))\r\n    .then(response =>{\r\n      //console.log('remove버튼 response',response)\r\n      if(response.payload.productInfo.length <=0){\r\n        setShowTotal(false)\r\n\r\n      }\r\n\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div style={{width:'85%', margin:'3rem auto'}}>\r\n        <h1>My Cart </h1>\r\n        <div>\r\n          <UserCardBlock products={props.user.cartDetail  && props.user.cartDetail.product} removeItem={removeFromCart}/>\r\n          {/* //3)redux 간단하게 product.js수정경우  && props.user.cartDetail.product 없애도 됨 */}\r\n        </div>\r\n\r\n        {ShowTotal ?\r\n            //{/* 합계금액 UI만들기 */}\r\n          <div style={{marginTop:'3rem'}}>\r\n            <h2>Total Amount : ${Total}</h2>\r\n          </div>\r\n          : \r\n          <>\r\n          <br/>\r\n          <br/>\r\n            <Empty description={false}/>\r\n          </>\r\n         \r\n      }\r\n           <p style={{textAlign:'center'}}>카트에 선택하신 상품이 없습니다</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CartPage\r\n"]},"metadata":{},"sourceType":"module"}